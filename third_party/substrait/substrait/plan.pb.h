// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/plan.proto

#ifndef PROTOBUF_INCLUDED_substrait_2fplan_2eproto
#define PROTOBUF_INCLUDED_substrait_2fplan_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "substrait/algebra.pb.h"
#include "substrait/extensions/extensions.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_substrait_2fplan_2eproto 

namespace protobuf_substrait_2fplan_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_substrait_2fplan_2eproto
namespace substrait {
class Plan;
class PlanDefaultTypeInternal;
extern PlanDefaultTypeInternal _Plan_default_instance_;
class PlanRel;
class PlanRelDefaultTypeInternal;
extern PlanRelDefaultTypeInternal _PlanRel_default_instance_;
class PlanVersion;
class PlanVersionDefaultTypeInternal;
extern PlanVersionDefaultTypeInternal _PlanVersion_default_instance_;
class Version;
class VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
}  // namespace substrait
namespace google {
namespace protobuf {
template<> ::substrait::Plan* Arena::CreateMaybeMessage<::substrait::Plan>(Arena*);
template<> ::substrait::PlanRel* Arena::CreateMaybeMessage<::substrait::PlanRel>(Arena*);
template<> ::substrait::PlanVersion* Arena::CreateMaybeMessage<::substrait::PlanVersion>(Arena*);
template<> ::substrait::Version* Arena::CreateMaybeMessage<::substrait::Version>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace substrait {

// ===================================================================

class PlanRel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:substrait.PlanRel) */ {
 public:
  PlanRel();
  virtual ~PlanRel();

  PlanRel(const PlanRel& from);

  inline PlanRel& operator=(const PlanRel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlanRel(PlanRel&& from) noexcept
    : PlanRel() {
    *this = ::std::move(from);
  }

  inline PlanRel& operator=(PlanRel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanRel& default_instance();

  enum RelTypeCase {
    kRel = 1,
    kRoot = 2,
    REL_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanRel* internal_default_instance() {
    return reinterpret_cast<const PlanRel*>(
               &_PlanRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PlanRel* other);
  friend void swap(PlanRel& a, PlanRel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlanRel* New() const final {
    return CreateMaybeMessage<PlanRel>(NULL);
  }

  PlanRel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlanRel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlanRel& from);
  void MergeFrom(const PlanRel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanRel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .substrait.Rel rel = 1;
  bool has_rel() const;
  void clear_rel();
  static const int kRelFieldNumber = 1;
  private:
  const ::substrait::Rel& _internal_rel() const;
  public:
  const ::substrait::Rel& rel() const;
  ::substrait::Rel* release_rel();
  ::substrait::Rel* mutable_rel();
  void set_allocated_rel(::substrait::Rel* rel);

  // .substrait.RelRoot root = 2;
  bool has_root() const;
  void clear_root();
  static const int kRootFieldNumber = 2;
  private:
  const ::substrait::RelRoot& _internal_root() const;
  public:
  const ::substrait::RelRoot& root() const;
  ::substrait::RelRoot* release_root();
  ::substrait::RelRoot* mutable_root();
  void set_allocated_root(::substrait::RelRoot* root);

  void clear_rel_type();
  RelTypeCase rel_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.PlanRel)
 private:
  void set_has_rel();
  void set_has_root();

  inline bool has_rel_type() const;
  inline void clear_has_rel_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union RelTypeUnion {
    RelTypeUnion() {}
    ::substrait::Rel* rel_;
    ::substrait::RelRoot* root_;
  } rel_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_substrait_2fplan_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Plan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:substrait.Plan) */ {
 public:
  Plan();
  virtual ~Plan();

  Plan(const Plan& from);

  inline Plan& operator=(const Plan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Plan(Plan&& from) noexcept
    : Plan() {
    *this = ::std::move(from);
  }

  inline Plan& operator=(Plan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Plan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Plan* internal_default_instance() {
    return reinterpret_cast<const Plan*>(
               &_Plan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Plan* other);
  friend void swap(Plan& a, Plan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Plan* New() const final {
    return CreateMaybeMessage<Plan>(NULL);
  }

  Plan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Plan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Plan& from);
  void MergeFrom(const Plan& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Plan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1;
  int extension_uris_size() const;
  void clear_extension_uris();
  static const int kExtensionUrisFieldNumber = 1;
  ::substrait::extensions::SimpleExtensionURI* mutable_extension_uris(int index);
  ::google::protobuf::RepeatedPtrField< ::substrait::extensions::SimpleExtensionURI >*
      mutable_extension_uris();
  const ::substrait::extensions::SimpleExtensionURI& extension_uris(int index) const;
  ::substrait::extensions::SimpleExtensionURI* add_extension_uris();
  const ::google::protobuf::RepeatedPtrField< ::substrait::extensions::SimpleExtensionURI >&
      extension_uris() const;

  // repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2;
  int extensions_size() const;
  void clear_extensions();
  static const int kExtensionsFieldNumber = 2;
  ::substrait::extensions::SimpleExtensionDeclaration* mutable_extensions(int index);
  ::google::protobuf::RepeatedPtrField< ::substrait::extensions::SimpleExtensionDeclaration >*
      mutable_extensions();
  const ::substrait::extensions::SimpleExtensionDeclaration& extensions(int index) const;
  ::substrait::extensions::SimpleExtensionDeclaration* add_extensions();
  const ::google::protobuf::RepeatedPtrField< ::substrait::extensions::SimpleExtensionDeclaration >&
      extensions() const;

  // repeated .substrait.PlanRel relations = 3;
  int relations_size() const;
  void clear_relations();
  static const int kRelationsFieldNumber = 3;
  ::substrait::PlanRel* mutable_relations(int index);
  ::google::protobuf::RepeatedPtrField< ::substrait::PlanRel >*
      mutable_relations();
  const ::substrait::PlanRel& relations(int index) const;
  ::substrait::PlanRel* add_relations();
  const ::google::protobuf::RepeatedPtrField< ::substrait::PlanRel >&
      relations() const;

  // repeated string expected_type_urls = 5;
  int expected_type_urls_size() const;
  void clear_expected_type_urls();
  static const int kExpectedTypeUrlsFieldNumber = 5;
  const ::std::string& expected_type_urls(int index) const;
  ::std::string* mutable_expected_type_urls(int index);
  void set_expected_type_urls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_expected_type_urls(int index, ::std::string&& value);
  #endif
  void set_expected_type_urls(int index, const char* value);
  void set_expected_type_urls(int index, const char* value, size_t size);
  ::std::string* add_expected_type_urls();
  void add_expected_type_urls(const ::std::string& value);
  #if LANG_CXX11
  void add_expected_type_urls(::std::string&& value);
  #endif
  void add_expected_type_urls(const char* value);
  void add_expected_type_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& expected_type_urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_expected_type_urls();

  // .substrait.extensions.AdvancedExtension advanced_extensions = 4;
  bool has_advanced_extensions() const;
  void clear_advanced_extensions();
  static const int kAdvancedExtensionsFieldNumber = 4;
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extensions() const;
  public:
  const ::substrait::extensions::AdvancedExtension& advanced_extensions() const;
  ::substrait::extensions::AdvancedExtension* release_advanced_extensions();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extensions();
  void set_allocated_advanced_extensions(::substrait::extensions::AdvancedExtension* advanced_extensions);

  // .substrait.Version version = 6;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 6;
  private:
  const ::substrait::Version& _internal_version() const;
  public:
  const ::substrait::Version& version() const;
  ::substrait::Version* release_version();
  ::substrait::Version* mutable_version();
  void set_allocated_version(::substrait::Version* version);

  // @@protoc_insertion_point(class_scope:substrait.Plan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::substrait::extensions::SimpleExtensionURI > extension_uris_;
  ::google::protobuf::RepeatedPtrField< ::substrait::extensions::SimpleExtensionDeclaration > extensions_;
  ::google::protobuf::RepeatedPtrField< ::substrait::PlanRel > relations_;
  ::google::protobuf::RepeatedPtrField< ::std::string> expected_type_urls_;
  ::substrait::extensions::AdvancedExtension* advanced_extensions_;
  ::substrait::Version* version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_substrait_2fplan_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlanVersion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:substrait.PlanVersion) */ {
 public:
  PlanVersion();
  virtual ~PlanVersion();

  PlanVersion(const PlanVersion& from);

  inline PlanVersion& operator=(const PlanVersion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlanVersion(PlanVersion&& from) noexcept
    : PlanVersion() {
    *this = ::std::move(from);
  }

  inline PlanVersion& operator=(PlanVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanVersion* internal_default_instance() {
    return reinterpret_cast<const PlanVersion*>(
               &_PlanVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PlanVersion* other);
  friend void swap(PlanVersion& a, PlanVersion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlanVersion* New() const final {
    return CreateMaybeMessage<PlanVersion>(NULL);
  }

  PlanVersion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlanVersion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlanVersion& from);
  void MergeFrom(const PlanVersion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanVersion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .substrait.Version version = 6;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 6;
  private:
  const ::substrait::Version& _internal_version() const;
  public:
  const ::substrait::Version& version() const;
  ::substrait::Version* release_version();
  ::substrait::Version* mutable_version();
  void set_allocated_version(::substrait::Version* version);

  // @@protoc_insertion_point(class_scope:substrait.PlanVersion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::substrait::Version* version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_substrait_2fplan_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Version : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:substrait.Version) */ {
 public:
  Version();
  virtual ~Version();

  Version(const Version& from);

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(Version&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Version& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Version* other);
  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Version* New() const final {
    return CreateMaybeMessage<Version>(NULL);
  }

  Version* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Version& from);
  void MergeFrom(const Version& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Version* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string git_hash = 4;
  void clear_git_hash();
  static const int kGitHashFieldNumber = 4;
  const ::std::string& git_hash() const;
  void set_git_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_git_hash(::std::string&& value);
  #endif
  void set_git_hash(const char* value);
  void set_git_hash(const char* value, size_t size);
  ::std::string* mutable_git_hash();
  ::std::string* release_git_hash();
  void set_allocated_git_hash(::std::string* git_hash);

  // string producer = 5;
  void clear_producer();
  static const int kProducerFieldNumber = 5;
  const ::std::string& producer() const;
  void set_producer(const ::std::string& value);
  #if LANG_CXX11
  void set_producer(::std::string&& value);
  #endif
  void set_producer(const char* value);
  void set_producer(const char* value, size_t size);
  ::std::string* mutable_producer();
  ::std::string* release_producer();
  void set_allocated_producer(::std::string* producer);

  // uint32 major_number = 1;
  void clear_major_number();
  static const int kMajorNumberFieldNumber = 1;
  ::google::protobuf::uint32 major_number() const;
  void set_major_number(::google::protobuf::uint32 value);

  // uint32 minor_number = 2;
  void clear_minor_number();
  static const int kMinorNumberFieldNumber = 2;
  ::google::protobuf::uint32 minor_number() const;
  void set_minor_number(::google::protobuf::uint32 value);

  // uint32 patch_number = 3;
  void clear_patch_number();
  static const int kPatchNumberFieldNumber = 3;
  ::google::protobuf::uint32 patch_number() const;
  void set_patch_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:substrait.Version)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr git_hash_;
  ::google::protobuf::internal::ArenaStringPtr producer_;
  ::google::protobuf::uint32 major_number_;
  ::google::protobuf::uint32 minor_number_;
  ::google::protobuf::uint32 patch_number_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_substrait_2fplan_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlanRel

// .substrait.Rel rel = 1;
inline bool PlanRel::has_rel() const {
  return rel_type_case() == kRel;
}
inline void PlanRel::set_has_rel() {
  _oneof_case_[0] = kRel;
}
inline const ::substrait::Rel& PlanRel::_internal_rel() const {
  return *rel_type_.rel_;
}
inline ::substrait::Rel* PlanRel::release_rel() {
  // @@protoc_insertion_point(field_release:substrait.PlanRel.rel)
  if (has_rel()) {
    clear_has_rel_type();
      ::substrait::Rel* temp = rel_type_.rel_;
    rel_type_.rel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::substrait::Rel& PlanRel::rel() const {
  // @@protoc_insertion_point(field_get:substrait.PlanRel.rel)
  return has_rel()
      ? *rel_type_.rel_
      : *reinterpret_cast< ::substrait::Rel*>(&::substrait::_Rel_default_instance_);
}
inline ::substrait::Rel* PlanRel::mutable_rel() {
  if (!has_rel()) {
    clear_rel_type();
    set_has_rel();
    rel_type_.rel_ = CreateMaybeMessage< ::substrait::Rel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:substrait.PlanRel.rel)
  return rel_type_.rel_;
}

// .substrait.RelRoot root = 2;
inline bool PlanRel::has_root() const {
  return rel_type_case() == kRoot;
}
inline void PlanRel::set_has_root() {
  _oneof_case_[0] = kRoot;
}
inline const ::substrait::RelRoot& PlanRel::_internal_root() const {
  return *rel_type_.root_;
}
inline ::substrait::RelRoot* PlanRel::release_root() {
  // @@protoc_insertion_point(field_release:substrait.PlanRel.root)
  if (has_root()) {
    clear_has_rel_type();
      ::substrait::RelRoot* temp = rel_type_.root_;
    rel_type_.root_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::substrait::RelRoot& PlanRel::root() const {
  // @@protoc_insertion_point(field_get:substrait.PlanRel.root)
  return has_root()
      ? *rel_type_.root_
      : *reinterpret_cast< ::substrait::RelRoot*>(&::substrait::_RelRoot_default_instance_);
}
inline ::substrait::RelRoot* PlanRel::mutable_root() {
  if (!has_root()) {
    clear_rel_type();
    set_has_root();
    rel_type_.root_ = CreateMaybeMessage< ::substrait::RelRoot >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:substrait.PlanRel.root)
  return rel_type_.root_;
}

inline bool PlanRel::has_rel_type() const {
  return rel_type_case() != REL_TYPE_NOT_SET;
}
inline void PlanRel::clear_has_rel_type() {
  _oneof_case_[0] = REL_TYPE_NOT_SET;
}
inline PlanRel::RelTypeCase PlanRel::rel_type_case() const {
  return PlanRel::RelTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Plan

// .substrait.Version version = 6;
inline bool Plan::has_version() const {
  return this != internal_default_instance() && version_ != NULL;
}
inline void Plan::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
}
inline const ::substrait::Version& Plan::_internal_version() const {
  return *version_;
}
inline const ::substrait::Version& Plan::version() const {
  const ::substrait::Version* p = version_;
  // @@protoc_insertion_point(field_get:substrait.Plan.version)
  return p != NULL ? *p : *reinterpret_cast<const ::substrait::Version*>(
      &::substrait::_Version_default_instance_);
}
inline ::substrait::Version* Plan::release_version() {
  // @@protoc_insertion_point(field_release:substrait.Plan.version)
  
  ::substrait::Version* temp = version_;
  version_ = NULL;
  return temp;
}
inline ::substrait::Version* Plan::mutable_version() {
  
  if (version_ == NULL) {
    auto* p = CreateMaybeMessage<::substrait::Version>(GetArenaNoVirtual());
    version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:substrait.Plan.version)
  return version_;
}
inline void Plan::set_allocated_version(::substrait::Version* version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete version_;
  }
  if (version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:substrait.Plan.version)
}

// repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1;
inline int Plan::extension_uris_size() const {
  return extension_uris_.size();
}
inline ::substrait::extensions::SimpleExtensionURI* Plan::mutable_extension_uris(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Plan.extension_uris)
  return extension_uris_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::substrait::extensions::SimpleExtensionURI >*
Plan::mutable_extension_uris() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Plan.extension_uris)
  return &extension_uris_;
}
inline const ::substrait::extensions::SimpleExtensionURI& Plan::extension_uris(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Plan.extension_uris)
  return extension_uris_.Get(index);
}
inline ::substrait::extensions::SimpleExtensionURI* Plan::add_extension_uris() {
  // @@protoc_insertion_point(field_add:substrait.Plan.extension_uris)
  return extension_uris_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::substrait::extensions::SimpleExtensionURI >&
Plan::extension_uris() const {
  // @@protoc_insertion_point(field_list:substrait.Plan.extension_uris)
  return extension_uris_;
}

// repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2;
inline int Plan::extensions_size() const {
  return extensions_.size();
}
inline ::substrait::extensions::SimpleExtensionDeclaration* Plan::mutable_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Plan.extensions)
  return extensions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::substrait::extensions::SimpleExtensionDeclaration >*
Plan::mutable_extensions() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Plan.extensions)
  return &extensions_;
}
inline const ::substrait::extensions::SimpleExtensionDeclaration& Plan::extensions(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Plan.extensions)
  return extensions_.Get(index);
}
inline ::substrait::extensions::SimpleExtensionDeclaration* Plan::add_extensions() {
  // @@protoc_insertion_point(field_add:substrait.Plan.extensions)
  return extensions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::substrait::extensions::SimpleExtensionDeclaration >&
Plan::extensions() const {
  // @@protoc_insertion_point(field_list:substrait.Plan.extensions)
  return extensions_;
}

// repeated .substrait.PlanRel relations = 3;
inline int Plan::relations_size() const {
  return relations_.size();
}
inline void Plan::clear_relations() {
  relations_.Clear();
}
inline ::substrait::PlanRel* Plan::mutable_relations(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Plan.relations)
  return relations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::substrait::PlanRel >*
Plan::mutable_relations() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Plan.relations)
  return &relations_;
}
inline const ::substrait::PlanRel& Plan::relations(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Plan.relations)
  return relations_.Get(index);
}
inline ::substrait::PlanRel* Plan::add_relations() {
  // @@protoc_insertion_point(field_add:substrait.Plan.relations)
  return relations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::substrait::PlanRel >&
Plan::relations() const {
  // @@protoc_insertion_point(field_list:substrait.Plan.relations)
  return relations_;
}

// .substrait.extensions.AdvancedExtension advanced_extensions = 4;
inline bool Plan::has_advanced_extensions() const {
  return this != internal_default_instance() && advanced_extensions_ != NULL;
}
inline const ::substrait::extensions::AdvancedExtension& Plan::_internal_advanced_extensions() const {
  return *advanced_extensions_;
}
inline const ::substrait::extensions::AdvancedExtension& Plan::advanced_extensions() const {
  const ::substrait::extensions::AdvancedExtension* p = advanced_extensions_;
  // @@protoc_insertion_point(field_get:substrait.Plan.advanced_extensions)
  return p != NULL ? *p : *reinterpret_cast<const ::substrait::extensions::AdvancedExtension*>(
      &::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline ::substrait::extensions::AdvancedExtension* Plan::release_advanced_extensions() {
  // @@protoc_insertion_point(field_release:substrait.Plan.advanced_extensions)
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extensions_;
  advanced_extensions_ = NULL;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* Plan::mutable_advanced_extensions() {
  
  if (advanced_extensions_ == NULL) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaNoVirtual());
    advanced_extensions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:substrait.Plan.advanced_extensions)
  return advanced_extensions_;
}
inline void Plan::set_allocated_advanced_extensions(::substrait::extensions::AdvancedExtension* advanced_extensions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(advanced_extensions_);
  }
  if (advanced_extensions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      advanced_extensions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, advanced_extensions, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extensions_ = advanced_extensions;
  // @@protoc_insertion_point(field_set_allocated:substrait.Plan.advanced_extensions)
}

// repeated string expected_type_urls = 5;
inline int Plan::expected_type_urls_size() const {
  return expected_type_urls_.size();
}
inline void Plan::clear_expected_type_urls() {
  expected_type_urls_.Clear();
}
inline const ::std::string& Plan::expected_type_urls(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Plan.expected_type_urls)
  return expected_type_urls_.Get(index);
}
inline ::std::string* Plan::mutable_expected_type_urls(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Plan.expected_type_urls)
  return expected_type_urls_.Mutable(index);
}
inline void Plan::set_expected_type_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:substrait.Plan.expected_type_urls)
  expected_type_urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Plan::set_expected_type_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.Plan.expected_type_urls)
  expected_type_urls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Plan::set_expected_type_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  expected_type_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.Plan.expected_type_urls)
}
inline void Plan::set_expected_type_urls(int index, const char* value, size_t size) {
  expected_type_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.Plan.expected_type_urls)
}
inline ::std::string* Plan::add_expected_type_urls() {
  // @@protoc_insertion_point(field_add_mutable:substrait.Plan.expected_type_urls)
  return expected_type_urls_.Add();
}
inline void Plan::add_expected_type_urls(const ::std::string& value) {
  expected_type_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.Plan.expected_type_urls)
}
#if LANG_CXX11
inline void Plan::add_expected_type_urls(::std::string&& value) {
  expected_type_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.Plan.expected_type_urls)
}
#endif
inline void Plan::add_expected_type_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  expected_type_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.Plan.expected_type_urls)
}
inline void Plan::add_expected_type_urls(const char* value, size_t size) {
  expected_type_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.Plan.expected_type_urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Plan::expected_type_urls() const {
  // @@protoc_insertion_point(field_list:substrait.Plan.expected_type_urls)
  return expected_type_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Plan::mutable_expected_type_urls() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Plan.expected_type_urls)
  return &expected_type_urls_;
}

// -------------------------------------------------------------------

// PlanVersion

// .substrait.Version version = 6;
inline bool PlanVersion::has_version() const {
  return this != internal_default_instance() && version_ != NULL;
}
inline void PlanVersion::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
}
inline const ::substrait::Version& PlanVersion::_internal_version() const {
  return *version_;
}
inline const ::substrait::Version& PlanVersion::version() const {
  const ::substrait::Version* p = version_;
  // @@protoc_insertion_point(field_get:substrait.PlanVersion.version)
  return p != NULL ? *p : *reinterpret_cast<const ::substrait::Version*>(
      &::substrait::_Version_default_instance_);
}
inline ::substrait::Version* PlanVersion::release_version() {
  // @@protoc_insertion_point(field_release:substrait.PlanVersion.version)
  
  ::substrait::Version* temp = version_;
  version_ = NULL;
  return temp;
}
inline ::substrait::Version* PlanVersion::mutable_version() {
  
  if (version_ == NULL) {
    auto* p = CreateMaybeMessage<::substrait::Version>(GetArenaNoVirtual());
    version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:substrait.PlanVersion.version)
  return version_;
}
inline void PlanVersion::set_allocated_version(::substrait::Version* version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete version_;
  }
  if (version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:substrait.PlanVersion.version)
}

// -------------------------------------------------------------------

// Version

// uint32 major_number = 1;
inline void Version::clear_major_number() {
  major_number_ = 0u;
}
inline ::google::protobuf::uint32 Version::major_number() const {
  // @@protoc_insertion_point(field_get:substrait.Version.major_number)
  return major_number_;
}
inline void Version::set_major_number(::google::protobuf::uint32 value) {
  
  major_number_ = value;
  // @@protoc_insertion_point(field_set:substrait.Version.major_number)
}

// uint32 minor_number = 2;
inline void Version::clear_minor_number() {
  minor_number_ = 0u;
}
inline ::google::protobuf::uint32 Version::minor_number() const {
  // @@protoc_insertion_point(field_get:substrait.Version.minor_number)
  return minor_number_;
}
inline void Version::set_minor_number(::google::protobuf::uint32 value) {
  
  minor_number_ = value;
  // @@protoc_insertion_point(field_set:substrait.Version.minor_number)
}

// uint32 patch_number = 3;
inline void Version::clear_patch_number() {
  patch_number_ = 0u;
}
inline ::google::protobuf::uint32 Version::patch_number() const {
  // @@protoc_insertion_point(field_get:substrait.Version.patch_number)
  return patch_number_;
}
inline void Version::set_patch_number(::google::protobuf::uint32 value) {
  
  patch_number_ = value;
  // @@protoc_insertion_point(field_set:substrait.Version.patch_number)
}

// string git_hash = 4;
inline void Version::clear_git_hash() {
  git_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Version::git_hash() const {
  // @@protoc_insertion_point(field_get:substrait.Version.git_hash)
  return git_hash_.GetNoArena();
}
inline void Version::set_git_hash(const ::std::string& value) {
  
  git_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:substrait.Version.git_hash)
}
#if LANG_CXX11
inline void Version::set_git_hash(::std::string&& value) {
  
  git_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:substrait.Version.git_hash)
}
#endif
inline void Version::set_git_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  git_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:substrait.Version.git_hash)
}
inline void Version::set_git_hash(const char* value, size_t size) {
  
  git_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:substrait.Version.git_hash)
}
inline ::std::string* Version::mutable_git_hash() {
  
  // @@protoc_insertion_point(field_mutable:substrait.Version.git_hash)
  return git_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Version::release_git_hash() {
  // @@protoc_insertion_point(field_release:substrait.Version.git_hash)
  
  return git_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Version::set_allocated_git_hash(::std::string* git_hash) {
  if (git_hash != NULL) {
    
  } else {
    
  }
  git_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), git_hash);
  // @@protoc_insertion_point(field_set_allocated:substrait.Version.git_hash)
}

// string producer = 5;
inline void Version::clear_producer() {
  producer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Version::producer() const {
  // @@protoc_insertion_point(field_get:substrait.Version.producer)
  return producer_.GetNoArena();
}
inline void Version::set_producer(const ::std::string& value) {
  
  producer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:substrait.Version.producer)
}
#if LANG_CXX11
inline void Version::set_producer(::std::string&& value) {
  
  producer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:substrait.Version.producer)
}
#endif
inline void Version::set_producer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  producer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:substrait.Version.producer)
}
inline void Version::set_producer(const char* value, size_t size) {
  
  producer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:substrait.Version.producer)
}
inline ::std::string* Version::mutable_producer() {
  
  // @@protoc_insertion_point(field_mutable:substrait.Version.producer)
  return producer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Version::release_producer() {
  // @@protoc_insertion_point(field_release:substrait.Version.producer)
  
  return producer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Version::set_allocated_producer(::std::string* producer) {
  if (producer != NULL) {
    
  } else {
    
  }
  producer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), producer);
  // @@protoc_insertion_point(field_set_allocated:substrait.Version.producer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace substrait

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_substrait_2fplan_2eproto
