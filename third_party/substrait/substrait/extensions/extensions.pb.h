// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/extensions/extensions.proto

#ifndef PROTOBUF_INCLUDED_substrait_2fextensions_2fextensions_2eproto
#define PROTOBUF_INCLUDED_substrait_2fextensions_2fextensions_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_substrait_2fextensions_2fextensions_2eproto 

namespace protobuf_substrait_2fextensions_2fextensions_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_substrait_2fextensions_2fextensions_2eproto
namespace substrait {
namespace extensions {
class AdvancedExtension;
class AdvancedExtensionDefaultTypeInternal;
extern AdvancedExtensionDefaultTypeInternal _AdvancedExtension_default_instance_;
class SimpleExtensionDeclaration;
class SimpleExtensionDeclarationDefaultTypeInternal;
extern SimpleExtensionDeclarationDefaultTypeInternal _SimpleExtensionDeclaration_default_instance_;
class SimpleExtensionDeclaration_ExtensionFunction;
class SimpleExtensionDeclaration_ExtensionFunctionDefaultTypeInternal;
extern SimpleExtensionDeclaration_ExtensionFunctionDefaultTypeInternal _SimpleExtensionDeclaration_ExtensionFunction_default_instance_;
class SimpleExtensionDeclaration_ExtensionType;
class SimpleExtensionDeclaration_ExtensionTypeDefaultTypeInternal;
extern SimpleExtensionDeclaration_ExtensionTypeDefaultTypeInternal _SimpleExtensionDeclaration_ExtensionType_default_instance_;
class SimpleExtensionDeclaration_ExtensionTypeVariation;
class SimpleExtensionDeclaration_ExtensionTypeVariationDefaultTypeInternal;
extern SimpleExtensionDeclaration_ExtensionTypeVariationDefaultTypeInternal _SimpleExtensionDeclaration_ExtensionTypeVariation_default_instance_;
class SimpleExtensionURI;
class SimpleExtensionURIDefaultTypeInternal;
extern SimpleExtensionURIDefaultTypeInternal _SimpleExtensionURI_default_instance_;
}  // namespace extensions
}  // namespace substrait
namespace google {
namespace protobuf {
template<> ::substrait::extensions::AdvancedExtension* Arena::CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(Arena*);
template<> ::substrait::extensions::SimpleExtensionDeclaration* Arena::CreateMaybeMessage<::substrait::extensions::SimpleExtensionDeclaration>(Arena*);
template<> ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* Arena::CreateMaybeMessage<::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction>(Arena*);
template<> ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* Arena::CreateMaybeMessage<::substrait::extensions::SimpleExtensionDeclaration_ExtensionType>(Arena*);
template<> ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* Arena::CreateMaybeMessage<::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation>(Arena*);
template<> ::substrait::extensions::SimpleExtensionURI* Arena::CreateMaybeMessage<::substrait::extensions::SimpleExtensionURI>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace substrait {
namespace extensions {

// ===================================================================

class SimpleExtensionURI : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:substrait.extensions.SimpleExtensionURI) */ {
 public:
  SimpleExtensionURI();
  virtual ~SimpleExtensionURI();

  SimpleExtensionURI(const SimpleExtensionURI& from);

  inline SimpleExtensionURI& operator=(const SimpleExtensionURI& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleExtensionURI(SimpleExtensionURI&& from) noexcept
    : SimpleExtensionURI() {
    *this = ::std::move(from);
  }

  inline SimpleExtensionURI& operator=(SimpleExtensionURI&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleExtensionURI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleExtensionURI* internal_default_instance() {
    return reinterpret_cast<const SimpleExtensionURI*>(
               &_SimpleExtensionURI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SimpleExtensionURI* other);
  friend void swap(SimpleExtensionURI& a, SimpleExtensionURI& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleExtensionURI* New() const final {
    return CreateMaybeMessage<SimpleExtensionURI>(NULL);
  }

  SimpleExtensionURI* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleExtensionURI>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleExtensionURI& from);
  void MergeFrom(const SimpleExtensionURI& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleExtensionURI* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uri = 2;
  void clear_uri();
  static const int kUriFieldNumber = 2;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // uint32 extension_uri_anchor = 1;
  void clear_extension_uri_anchor();
  static const int kExtensionUriAnchorFieldNumber = 1;
  ::google::protobuf::uint32 extension_uri_anchor() const;
  void set_extension_uri_anchor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:substrait.extensions.SimpleExtensionURI)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::uint32 extension_uri_anchor_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_substrait_2fextensions_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimpleExtensionDeclaration_ExtensionType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:substrait.extensions.SimpleExtensionDeclaration.ExtensionType) */ {
 public:
  SimpleExtensionDeclaration_ExtensionType();
  virtual ~SimpleExtensionDeclaration_ExtensionType();

  SimpleExtensionDeclaration_ExtensionType(const SimpleExtensionDeclaration_ExtensionType& from);

  inline SimpleExtensionDeclaration_ExtensionType& operator=(const SimpleExtensionDeclaration_ExtensionType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleExtensionDeclaration_ExtensionType(SimpleExtensionDeclaration_ExtensionType&& from) noexcept
    : SimpleExtensionDeclaration_ExtensionType() {
    *this = ::std::move(from);
  }

  inline SimpleExtensionDeclaration_ExtensionType& operator=(SimpleExtensionDeclaration_ExtensionType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleExtensionDeclaration_ExtensionType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleExtensionDeclaration_ExtensionType* internal_default_instance() {
    return reinterpret_cast<const SimpleExtensionDeclaration_ExtensionType*>(
               &_SimpleExtensionDeclaration_ExtensionType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SimpleExtensionDeclaration_ExtensionType* other);
  friend void swap(SimpleExtensionDeclaration_ExtensionType& a, SimpleExtensionDeclaration_ExtensionType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleExtensionDeclaration_ExtensionType* New() const final {
    return CreateMaybeMessage<SimpleExtensionDeclaration_ExtensionType>(NULL);
  }

  SimpleExtensionDeclaration_ExtensionType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleExtensionDeclaration_ExtensionType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleExtensionDeclaration_ExtensionType& from);
  void MergeFrom(const SimpleExtensionDeclaration_ExtensionType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleExtensionDeclaration_ExtensionType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 extension_uri_reference = 1;
  void clear_extension_uri_reference();
  static const int kExtensionUriReferenceFieldNumber = 1;
  ::google::protobuf::uint32 extension_uri_reference() const;
  void set_extension_uri_reference(::google::protobuf::uint32 value);

  // uint32 type_anchor = 2;
  void clear_type_anchor();
  static const int kTypeAnchorFieldNumber = 2;
  ::google::protobuf::uint32 type_anchor() const;
  void set_type_anchor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:substrait.extensions.SimpleExtensionDeclaration.ExtensionType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 extension_uri_reference_;
  ::google::protobuf::uint32 type_anchor_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_substrait_2fextensions_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimpleExtensionDeclaration_ExtensionTypeVariation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation) */ {
 public:
  SimpleExtensionDeclaration_ExtensionTypeVariation();
  virtual ~SimpleExtensionDeclaration_ExtensionTypeVariation();

  SimpleExtensionDeclaration_ExtensionTypeVariation(const SimpleExtensionDeclaration_ExtensionTypeVariation& from);

  inline SimpleExtensionDeclaration_ExtensionTypeVariation& operator=(const SimpleExtensionDeclaration_ExtensionTypeVariation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleExtensionDeclaration_ExtensionTypeVariation(SimpleExtensionDeclaration_ExtensionTypeVariation&& from) noexcept
    : SimpleExtensionDeclaration_ExtensionTypeVariation() {
    *this = ::std::move(from);
  }

  inline SimpleExtensionDeclaration_ExtensionTypeVariation& operator=(SimpleExtensionDeclaration_ExtensionTypeVariation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleExtensionDeclaration_ExtensionTypeVariation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleExtensionDeclaration_ExtensionTypeVariation* internal_default_instance() {
    return reinterpret_cast<const SimpleExtensionDeclaration_ExtensionTypeVariation*>(
               &_SimpleExtensionDeclaration_ExtensionTypeVariation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SimpleExtensionDeclaration_ExtensionTypeVariation* other);
  friend void swap(SimpleExtensionDeclaration_ExtensionTypeVariation& a, SimpleExtensionDeclaration_ExtensionTypeVariation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleExtensionDeclaration_ExtensionTypeVariation* New() const final {
    return CreateMaybeMessage<SimpleExtensionDeclaration_ExtensionTypeVariation>(NULL);
  }

  SimpleExtensionDeclaration_ExtensionTypeVariation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleExtensionDeclaration_ExtensionTypeVariation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleExtensionDeclaration_ExtensionTypeVariation& from);
  void MergeFrom(const SimpleExtensionDeclaration_ExtensionTypeVariation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleExtensionDeclaration_ExtensionTypeVariation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 extension_uri_reference = 1;
  void clear_extension_uri_reference();
  static const int kExtensionUriReferenceFieldNumber = 1;
  ::google::protobuf::uint32 extension_uri_reference() const;
  void set_extension_uri_reference(::google::protobuf::uint32 value);

  // uint32 type_variation_anchor = 2;
  void clear_type_variation_anchor();
  static const int kTypeVariationAnchorFieldNumber = 2;
  ::google::protobuf::uint32 type_variation_anchor() const;
  void set_type_variation_anchor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 extension_uri_reference_;
  ::google::protobuf::uint32 type_variation_anchor_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_substrait_2fextensions_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimpleExtensionDeclaration_ExtensionFunction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction) */ {
 public:
  SimpleExtensionDeclaration_ExtensionFunction();
  virtual ~SimpleExtensionDeclaration_ExtensionFunction();

  SimpleExtensionDeclaration_ExtensionFunction(const SimpleExtensionDeclaration_ExtensionFunction& from);

  inline SimpleExtensionDeclaration_ExtensionFunction& operator=(const SimpleExtensionDeclaration_ExtensionFunction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleExtensionDeclaration_ExtensionFunction(SimpleExtensionDeclaration_ExtensionFunction&& from) noexcept
    : SimpleExtensionDeclaration_ExtensionFunction() {
    *this = ::std::move(from);
  }

  inline SimpleExtensionDeclaration_ExtensionFunction& operator=(SimpleExtensionDeclaration_ExtensionFunction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleExtensionDeclaration_ExtensionFunction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleExtensionDeclaration_ExtensionFunction* internal_default_instance() {
    return reinterpret_cast<const SimpleExtensionDeclaration_ExtensionFunction*>(
               &_SimpleExtensionDeclaration_ExtensionFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SimpleExtensionDeclaration_ExtensionFunction* other);
  friend void swap(SimpleExtensionDeclaration_ExtensionFunction& a, SimpleExtensionDeclaration_ExtensionFunction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleExtensionDeclaration_ExtensionFunction* New() const final {
    return CreateMaybeMessage<SimpleExtensionDeclaration_ExtensionFunction>(NULL);
  }

  SimpleExtensionDeclaration_ExtensionFunction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleExtensionDeclaration_ExtensionFunction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleExtensionDeclaration_ExtensionFunction& from);
  void MergeFrom(const SimpleExtensionDeclaration_ExtensionFunction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleExtensionDeclaration_ExtensionFunction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 extension_uri_reference = 1;
  void clear_extension_uri_reference();
  static const int kExtensionUriReferenceFieldNumber = 1;
  ::google::protobuf::uint32 extension_uri_reference() const;
  void set_extension_uri_reference(::google::protobuf::uint32 value);

  // uint32 function_anchor = 2;
  void clear_function_anchor();
  static const int kFunctionAnchorFieldNumber = 2;
  ::google::protobuf::uint32 function_anchor() const;
  void set_function_anchor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 extension_uri_reference_;
  ::google::protobuf::uint32 function_anchor_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_substrait_2fextensions_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimpleExtensionDeclaration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:substrait.extensions.SimpleExtensionDeclaration) */ {
 public:
  SimpleExtensionDeclaration();
  virtual ~SimpleExtensionDeclaration();

  SimpleExtensionDeclaration(const SimpleExtensionDeclaration& from);

  inline SimpleExtensionDeclaration& operator=(const SimpleExtensionDeclaration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleExtensionDeclaration(SimpleExtensionDeclaration&& from) noexcept
    : SimpleExtensionDeclaration() {
    *this = ::std::move(from);
  }

  inline SimpleExtensionDeclaration& operator=(SimpleExtensionDeclaration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleExtensionDeclaration& default_instance();

  enum MappingTypeCase {
    kExtensionType = 1,
    kExtensionTypeVariation = 2,
    kExtensionFunction = 3,
    MAPPING_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleExtensionDeclaration* internal_default_instance() {
    return reinterpret_cast<const SimpleExtensionDeclaration*>(
               &_SimpleExtensionDeclaration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SimpleExtensionDeclaration* other);
  friend void swap(SimpleExtensionDeclaration& a, SimpleExtensionDeclaration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleExtensionDeclaration* New() const final {
    return CreateMaybeMessage<SimpleExtensionDeclaration>(NULL);
  }

  SimpleExtensionDeclaration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleExtensionDeclaration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleExtensionDeclaration& from);
  void MergeFrom(const SimpleExtensionDeclaration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleExtensionDeclaration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SimpleExtensionDeclaration_ExtensionType ExtensionType;
  typedef SimpleExtensionDeclaration_ExtensionTypeVariation ExtensionTypeVariation;
  typedef SimpleExtensionDeclaration_ExtensionFunction ExtensionFunction;

  // accessors -------------------------------------------------------

  // .substrait.extensions.SimpleExtensionDeclaration.ExtensionType extension_type = 1;
  bool has_extension_type() const;
  void clear_extension_type();
  static const int kExtensionTypeFieldNumber = 1;
  private:
  const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType& _internal_extension_type() const;
  public:
  const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType& extension_type() const;
  ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* release_extension_type();
  ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* mutable_extension_type();
  void set_allocated_extension_type(::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* extension_type);

  // .substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation extension_type_variation = 2;
  bool has_extension_type_variation() const;
  void clear_extension_type_variation();
  static const int kExtensionTypeVariationFieldNumber = 2;
  private:
  const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation& _internal_extension_type_variation() const;
  public:
  const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation& extension_type_variation() const;
  ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* release_extension_type_variation();
  ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* mutable_extension_type_variation();
  void set_allocated_extension_type_variation(::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* extension_type_variation);

  // .substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction extension_function = 3;
  bool has_extension_function() const;
  void clear_extension_function();
  static const int kExtensionFunctionFieldNumber = 3;
  private:
  const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction& _internal_extension_function() const;
  public:
  const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction& extension_function() const;
  ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* release_extension_function();
  ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* mutable_extension_function();
  void set_allocated_extension_function(::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* extension_function);

  void clear_mapping_type();
  MappingTypeCase mapping_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.extensions.SimpleExtensionDeclaration)
 private:
  void set_has_extension_type();
  void set_has_extension_type_variation();
  void set_has_extension_function();

  inline bool has_mapping_type() const;
  inline void clear_has_mapping_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union MappingTypeUnion {
    MappingTypeUnion() {}
    ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* extension_type_;
    ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* extension_type_variation_;
    ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* extension_function_;
  } mapping_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_substrait_2fextensions_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdvancedExtension : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:substrait.extensions.AdvancedExtension) */ {
 public:
  AdvancedExtension();
  virtual ~AdvancedExtension();

  AdvancedExtension(const AdvancedExtension& from);

  inline AdvancedExtension& operator=(const AdvancedExtension& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdvancedExtension(AdvancedExtension&& from) noexcept
    : AdvancedExtension() {
    *this = ::std::move(from);
  }

  inline AdvancedExtension& operator=(AdvancedExtension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdvancedExtension& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdvancedExtension* internal_default_instance() {
    return reinterpret_cast<const AdvancedExtension*>(
               &_AdvancedExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AdvancedExtension* other);
  friend void swap(AdvancedExtension& a, AdvancedExtension& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdvancedExtension* New() const final {
    return CreateMaybeMessage<AdvancedExtension>(NULL);
  }

  AdvancedExtension* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdvancedExtension>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AdvancedExtension& from);
  void MergeFrom(const AdvancedExtension& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdvancedExtension* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Any optimization = 1;
  bool has_optimization() const;
  void clear_optimization();
  static const int kOptimizationFieldNumber = 1;
  private:
  const ::google::protobuf::Any& _internal_optimization() const;
  public:
  const ::google::protobuf::Any& optimization() const;
  ::google::protobuf::Any* release_optimization();
  ::google::protobuf::Any* mutable_optimization();
  void set_allocated_optimization(::google::protobuf::Any* optimization);

  // .google.protobuf.Any enhancement = 2;
  bool has_enhancement() const;
  void clear_enhancement();
  static const int kEnhancementFieldNumber = 2;
  private:
  const ::google::protobuf::Any& _internal_enhancement() const;
  public:
  const ::google::protobuf::Any& enhancement() const;
  ::google::protobuf::Any* release_enhancement();
  ::google::protobuf::Any* mutable_enhancement();
  void set_allocated_enhancement(::google::protobuf::Any* enhancement);

  // @@protoc_insertion_point(class_scope:substrait.extensions.AdvancedExtension)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Any* optimization_;
  ::google::protobuf::Any* enhancement_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_substrait_2fextensions_2fextensions_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimpleExtensionURI

// uint32 extension_uri_anchor = 1;
inline void SimpleExtensionURI::clear_extension_uri_anchor() {
  extension_uri_anchor_ = 0u;
}
inline ::google::protobuf::uint32 SimpleExtensionURI::extension_uri_anchor() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionURI.extension_uri_anchor)
  return extension_uri_anchor_;
}
inline void SimpleExtensionURI::set_extension_uri_anchor(::google::protobuf::uint32 value) {
  
  extension_uri_anchor_ = value;
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionURI.extension_uri_anchor)
}

// string uri = 2;
inline void SimpleExtensionURI::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SimpleExtensionURI::uri() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionURI.uri)
  return uri_.GetNoArena();
}
inline void SimpleExtensionURI::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionURI.uri)
}
#if LANG_CXX11
inline void SimpleExtensionURI::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:substrait.extensions.SimpleExtensionURI.uri)
}
#endif
inline void SimpleExtensionURI::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:substrait.extensions.SimpleExtensionURI.uri)
}
inline void SimpleExtensionURI::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:substrait.extensions.SimpleExtensionURI.uri)
}
inline ::std::string* SimpleExtensionURI::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:substrait.extensions.SimpleExtensionURI.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimpleExtensionURI::release_uri() {
  // @@protoc_insertion_point(field_release:substrait.extensions.SimpleExtensionURI.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimpleExtensionURI::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:substrait.extensions.SimpleExtensionURI.uri)
}

// -------------------------------------------------------------------

// SimpleExtensionDeclaration_ExtensionType

// uint32 extension_uri_reference = 1;
inline void SimpleExtensionDeclaration_ExtensionType::clear_extension_uri_reference() {
  extension_uri_reference_ = 0u;
}
inline ::google::protobuf::uint32 SimpleExtensionDeclaration_ExtensionType::extension_uri_reference() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.extension_uri_reference)
  return extension_uri_reference_;
}
inline void SimpleExtensionDeclaration_ExtensionType::set_extension_uri_reference(::google::protobuf::uint32 value) {
  
  extension_uri_reference_ = value;
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.extension_uri_reference)
}

// uint32 type_anchor = 2;
inline void SimpleExtensionDeclaration_ExtensionType::clear_type_anchor() {
  type_anchor_ = 0u;
}
inline ::google::protobuf::uint32 SimpleExtensionDeclaration_ExtensionType::type_anchor() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.type_anchor)
  return type_anchor_;
}
inline void SimpleExtensionDeclaration_ExtensionType::set_type_anchor(::google::protobuf::uint32 value) {
  
  type_anchor_ = value;
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.type_anchor)
}

// string name = 3;
inline void SimpleExtensionDeclaration_ExtensionType::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SimpleExtensionDeclaration_ExtensionType::name() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.name)
  return name_.GetNoArena();
}
inline void SimpleExtensionDeclaration_ExtensionType::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.name)
}
#if LANG_CXX11
inline void SimpleExtensionDeclaration_ExtensionType::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.name)
}
#endif
inline void SimpleExtensionDeclaration_ExtensionType::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.name)
}
inline void SimpleExtensionDeclaration_ExtensionType::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.name)
}
inline ::std::string* SimpleExtensionDeclaration_ExtensionType::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimpleExtensionDeclaration_ExtensionType::release_name() {
  // @@protoc_insertion_point(field_release:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimpleExtensionDeclaration_ExtensionType::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.name)
}

// -------------------------------------------------------------------

// SimpleExtensionDeclaration_ExtensionTypeVariation

// uint32 extension_uri_reference = 1;
inline void SimpleExtensionDeclaration_ExtensionTypeVariation::clear_extension_uri_reference() {
  extension_uri_reference_ = 0u;
}
inline ::google::protobuf::uint32 SimpleExtensionDeclaration_ExtensionTypeVariation::extension_uri_reference() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.extension_uri_reference)
  return extension_uri_reference_;
}
inline void SimpleExtensionDeclaration_ExtensionTypeVariation::set_extension_uri_reference(::google::protobuf::uint32 value) {
  
  extension_uri_reference_ = value;
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.extension_uri_reference)
}

// uint32 type_variation_anchor = 2;
inline void SimpleExtensionDeclaration_ExtensionTypeVariation::clear_type_variation_anchor() {
  type_variation_anchor_ = 0u;
}
inline ::google::protobuf::uint32 SimpleExtensionDeclaration_ExtensionTypeVariation::type_variation_anchor() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.type_variation_anchor)
  return type_variation_anchor_;
}
inline void SimpleExtensionDeclaration_ExtensionTypeVariation::set_type_variation_anchor(::google::protobuf::uint32 value) {
  
  type_variation_anchor_ = value;
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.type_variation_anchor)
}

// string name = 3;
inline void SimpleExtensionDeclaration_ExtensionTypeVariation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SimpleExtensionDeclaration_ExtensionTypeVariation::name() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.name)
  return name_.GetNoArena();
}
inline void SimpleExtensionDeclaration_ExtensionTypeVariation::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.name)
}
#if LANG_CXX11
inline void SimpleExtensionDeclaration_ExtensionTypeVariation::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.name)
}
#endif
inline void SimpleExtensionDeclaration_ExtensionTypeVariation::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.name)
}
inline void SimpleExtensionDeclaration_ExtensionTypeVariation::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.name)
}
inline ::std::string* SimpleExtensionDeclaration_ExtensionTypeVariation::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimpleExtensionDeclaration_ExtensionTypeVariation::release_name() {
  // @@protoc_insertion_point(field_release:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimpleExtensionDeclaration_ExtensionTypeVariation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.name)
}

// -------------------------------------------------------------------

// SimpleExtensionDeclaration_ExtensionFunction

// uint32 extension_uri_reference = 1;
inline void SimpleExtensionDeclaration_ExtensionFunction::clear_extension_uri_reference() {
  extension_uri_reference_ = 0u;
}
inline ::google::protobuf::uint32 SimpleExtensionDeclaration_ExtensionFunction::extension_uri_reference() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.extension_uri_reference)
  return extension_uri_reference_;
}
inline void SimpleExtensionDeclaration_ExtensionFunction::set_extension_uri_reference(::google::protobuf::uint32 value) {
  
  extension_uri_reference_ = value;
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.extension_uri_reference)
}

// uint32 function_anchor = 2;
inline void SimpleExtensionDeclaration_ExtensionFunction::clear_function_anchor() {
  function_anchor_ = 0u;
}
inline ::google::protobuf::uint32 SimpleExtensionDeclaration_ExtensionFunction::function_anchor() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.function_anchor)
  return function_anchor_;
}
inline void SimpleExtensionDeclaration_ExtensionFunction::set_function_anchor(::google::protobuf::uint32 value) {
  
  function_anchor_ = value;
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.function_anchor)
}

// string name = 3;
inline void SimpleExtensionDeclaration_ExtensionFunction::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SimpleExtensionDeclaration_ExtensionFunction::name() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.name)
  return name_.GetNoArena();
}
inline void SimpleExtensionDeclaration_ExtensionFunction::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.name)
}
#if LANG_CXX11
inline void SimpleExtensionDeclaration_ExtensionFunction::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.name)
}
#endif
inline void SimpleExtensionDeclaration_ExtensionFunction::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.name)
}
inline void SimpleExtensionDeclaration_ExtensionFunction::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.name)
}
inline ::std::string* SimpleExtensionDeclaration_ExtensionFunction::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimpleExtensionDeclaration_ExtensionFunction::release_name() {
  // @@protoc_insertion_point(field_release:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimpleExtensionDeclaration_ExtensionFunction::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.name)
}

// -------------------------------------------------------------------

// SimpleExtensionDeclaration

// .substrait.extensions.SimpleExtensionDeclaration.ExtensionType extension_type = 1;
inline bool SimpleExtensionDeclaration::has_extension_type() const {
  return mapping_type_case() == kExtensionType;
}
inline void SimpleExtensionDeclaration::set_has_extension_type() {
  _oneof_case_[0] = kExtensionType;
}
inline void SimpleExtensionDeclaration::clear_extension_type() {
  if (has_extension_type()) {
    delete mapping_type_.extension_type_;
    clear_has_mapping_type();
  }
}
inline const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType& SimpleExtensionDeclaration::_internal_extension_type() const {
  return *mapping_type_.extension_type_;
}
inline ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* SimpleExtensionDeclaration::release_extension_type() {
  // @@protoc_insertion_point(field_release:substrait.extensions.SimpleExtensionDeclaration.extension_type)
  if (has_extension_type()) {
    clear_has_mapping_type();
      ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* temp = mapping_type_.extension_type_;
    mapping_type_.extension_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType& SimpleExtensionDeclaration::extension_type() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.extension_type)
  return has_extension_type()
      ? *mapping_type_.extension_type_
      : *reinterpret_cast< ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType*>(&::substrait::extensions::_SimpleExtensionDeclaration_ExtensionType_default_instance_);
}
inline ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* SimpleExtensionDeclaration::mutable_extension_type() {
  if (!has_extension_type()) {
    clear_mapping_type();
    set_has_extension_type();
    mapping_type_.extension_type_ = CreateMaybeMessage< ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:substrait.extensions.SimpleExtensionDeclaration.extension_type)
  return mapping_type_.extension_type_;
}

// .substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation extension_type_variation = 2;
inline bool SimpleExtensionDeclaration::has_extension_type_variation() const {
  return mapping_type_case() == kExtensionTypeVariation;
}
inline void SimpleExtensionDeclaration::set_has_extension_type_variation() {
  _oneof_case_[0] = kExtensionTypeVariation;
}
inline void SimpleExtensionDeclaration::clear_extension_type_variation() {
  if (has_extension_type_variation()) {
    delete mapping_type_.extension_type_variation_;
    clear_has_mapping_type();
  }
}
inline const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation& SimpleExtensionDeclaration::_internal_extension_type_variation() const {
  return *mapping_type_.extension_type_variation_;
}
inline ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* SimpleExtensionDeclaration::release_extension_type_variation() {
  // @@protoc_insertion_point(field_release:substrait.extensions.SimpleExtensionDeclaration.extension_type_variation)
  if (has_extension_type_variation()) {
    clear_has_mapping_type();
      ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* temp = mapping_type_.extension_type_variation_;
    mapping_type_.extension_type_variation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation& SimpleExtensionDeclaration::extension_type_variation() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.extension_type_variation)
  return has_extension_type_variation()
      ? *mapping_type_.extension_type_variation_
      : *reinterpret_cast< ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation*>(&::substrait::extensions::_SimpleExtensionDeclaration_ExtensionTypeVariation_default_instance_);
}
inline ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* SimpleExtensionDeclaration::mutable_extension_type_variation() {
  if (!has_extension_type_variation()) {
    clear_mapping_type();
    set_has_extension_type_variation();
    mapping_type_.extension_type_variation_ = CreateMaybeMessage< ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:substrait.extensions.SimpleExtensionDeclaration.extension_type_variation)
  return mapping_type_.extension_type_variation_;
}

// .substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction extension_function = 3;
inline bool SimpleExtensionDeclaration::has_extension_function() const {
  return mapping_type_case() == kExtensionFunction;
}
inline void SimpleExtensionDeclaration::set_has_extension_function() {
  _oneof_case_[0] = kExtensionFunction;
}
inline void SimpleExtensionDeclaration::clear_extension_function() {
  if (has_extension_function()) {
    delete mapping_type_.extension_function_;
    clear_has_mapping_type();
  }
}
inline const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction& SimpleExtensionDeclaration::_internal_extension_function() const {
  return *mapping_type_.extension_function_;
}
inline ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* SimpleExtensionDeclaration::release_extension_function() {
  // @@protoc_insertion_point(field_release:substrait.extensions.SimpleExtensionDeclaration.extension_function)
  if (has_extension_function()) {
    clear_has_mapping_type();
      ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* temp = mapping_type_.extension_function_;
    mapping_type_.extension_function_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction& SimpleExtensionDeclaration::extension_function() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.extension_function)
  return has_extension_function()
      ? *mapping_type_.extension_function_
      : *reinterpret_cast< ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction*>(&::substrait::extensions::_SimpleExtensionDeclaration_ExtensionFunction_default_instance_);
}
inline ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* SimpleExtensionDeclaration::mutable_extension_function() {
  if (!has_extension_function()) {
    clear_mapping_type();
    set_has_extension_function();
    mapping_type_.extension_function_ = CreateMaybeMessage< ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:substrait.extensions.SimpleExtensionDeclaration.extension_function)
  return mapping_type_.extension_function_;
}

inline bool SimpleExtensionDeclaration::has_mapping_type() const {
  return mapping_type_case() != MAPPING_TYPE_NOT_SET;
}
inline void SimpleExtensionDeclaration::clear_has_mapping_type() {
  _oneof_case_[0] = MAPPING_TYPE_NOT_SET;
}
inline SimpleExtensionDeclaration::MappingTypeCase SimpleExtensionDeclaration::mapping_type_case() const {
  return SimpleExtensionDeclaration::MappingTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AdvancedExtension

// .google.protobuf.Any optimization = 1;
inline bool AdvancedExtension::has_optimization() const {
  return this != internal_default_instance() && optimization_ != NULL;
}
inline const ::google::protobuf::Any& AdvancedExtension::_internal_optimization() const {
  return *optimization_;
}
inline const ::google::protobuf::Any& AdvancedExtension::optimization() const {
  const ::google::protobuf::Any* p = optimization_;
  // @@protoc_insertion_point(field_get:substrait.extensions.AdvancedExtension.optimization)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* AdvancedExtension::release_optimization() {
  // @@protoc_insertion_point(field_release:substrait.extensions.AdvancedExtension.optimization)
  
  ::google::protobuf::Any* temp = optimization_;
  optimization_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* AdvancedExtension::mutable_optimization() {
  
  if (optimization_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    optimization_ = p;
  }
  // @@protoc_insertion_point(field_mutable:substrait.extensions.AdvancedExtension.optimization)
  return optimization_;
}
inline void AdvancedExtension::set_allocated_optimization(::google::protobuf::Any* optimization) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(optimization_);
  }
  if (optimization) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      optimization = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, optimization, submessage_arena);
    }
    
  } else {
    
  }
  optimization_ = optimization;
  // @@protoc_insertion_point(field_set_allocated:substrait.extensions.AdvancedExtension.optimization)
}

// .google.protobuf.Any enhancement = 2;
inline bool AdvancedExtension::has_enhancement() const {
  return this != internal_default_instance() && enhancement_ != NULL;
}
inline const ::google::protobuf::Any& AdvancedExtension::_internal_enhancement() const {
  return *enhancement_;
}
inline const ::google::protobuf::Any& AdvancedExtension::enhancement() const {
  const ::google::protobuf::Any* p = enhancement_;
  // @@protoc_insertion_point(field_get:substrait.extensions.AdvancedExtension.enhancement)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* AdvancedExtension::release_enhancement() {
  // @@protoc_insertion_point(field_release:substrait.extensions.AdvancedExtension.enhancement)
  
  ::google::protobuf::Any* temp = enhancement_;
  enhancement_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* AdvancedExtension::mutable_enhancement() {
  
  if (enhancement_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    enhancement_ = p;
  }
  // @@protoc_insertion_point(field_mutable:substrait.extensions.AdvancedExtension.enhancement)
  return enhancement_;
}
inline void AdvancedExtension::set_allocated_enhancement(::google::protobuf::Any* enhancement) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(enhancement_);
  }
  if (enhancement) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      enhancement = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, enhancement, submessage_arena);
    }
    
  } else {
    
  }
  enhancement_ = enhancement;
  // @@protoc_insertion_point(field_set_allocated:substrait.extensions.AdvancedExtension.enhancement)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace extensions
}  // namespace substrait

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_substrait_2fextensions_2fextensions_2eproto
