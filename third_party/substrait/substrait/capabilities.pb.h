// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/capabilities.proto

#ifndef PROTOBUF_INCLUDED_substrait_2fcapabilities_2eproto
#define PROTOBUF_INCLUDED_substrait_2fcapabilities_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_substrait_2fcapabilities_2eproto 

namespace protobuf_substrait_2fcapabilities_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_substrait_2fcapabilities_2eproto
namespace substrait {
class Capabilities;
class CapabilitiesDefaultTypeInternal;
extern CapabilitiesDefaultTypeInternal _Capabilities_default_instance_;
class Capabilities_SimpleExtension;
class Capabilities_SimpleExtensionDefaultTypeInternal;
extern Capabilities_SimpleExtensionDefaultTypeInternal _Capabilities_SimpleExtension_default_instance_;
}  // namespace substrait
namespace google {
namespace protobuf {
template<> ::substrait::Capabilities* Arena::CreateMaybeMessage<::substrait::Capabilities>(Arena*);
template<> ::substrait::Capabilities_SimpleExtension* Arena::CreateMaybeMessage<::substrait::Capabilities_SimpleExtension>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace substrait {

// ===================================================================

class Capabilities_SimpleExtension : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:substrait.Capabilities.SimpleExtension) */ {
 public:
  Capabilities_SimpleExtension();
  virtual ~Capabilities_SimpleExtension();

  Capabilities_SimpleExtension(const Capabilities_SimpleExtension& from);

  inline Capabilities_SimpleExtension& operator=(const Capabilities_SimpleExtension& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Capabilities_SimpleExtension(Capabilities_SimpleExtension&& from) noexcept
    : Capabilities_SimpleExtension() {
    *this = ::std::move(from);
  }

  inline Capabilities_SimpleExtension& operator=(Capabilities_SimpleExtension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Capabilities_SimpleExtension& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Capabilities_SimpleExtension* internal_default_instance() {
    return reinterpret_cast<const Capabilities_SimpleExtension*>(
               &_Capabilities_SimpleExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Capabilities_SimpleExtension* other);
  friend void swap(Capabilities_SimpleExtension& a, Capabilities_SimpleExtension& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Capabilities_SimpleExtension* New() const final {
    return CreateMaybeMessage<Capabilities_SimpleExtension>(NULL);
  }

  Capabilities_SimpleExtension* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Capabilities_SimpleExtension>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Capabilities_SimpleExtension& from);
  void MergeFrom(const Capabilities_SimpleExtension& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Capabilities_SimpleExtension* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string function_keys = 2;
  int function_keys_size() const;
  void clear_function_keys();
  static const int kFunctionKeysFieldNumber = 2;
  const ::std::string& function_keys(int index) const;
  ::std::string* mutable_function_keys(int index);
  void set_function_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_function_keys(int index, ::std::string&& value);
  #endif
  void set_function_keys(int index, const char* value);
  void set_function_keys(int index, const char* value, size_t size);
  ::std::string* add_function_keys();
  void add_function_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_function_keys(::std::string&& value);
  #endif
  void add_function_keys(const char* value);
  void add_function_keys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& function_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_function_keys();

  // repeated string type_keys = 3;
  int type_keys_size() const;
  void clear_type_keys();
  static const int kTypeKeysFieldNumber = 3;
  const ::std::string& type_keys(int index) const;
  ::std::string* mutable_type_keys(int index);
  void set_type_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_type_keys(int index, ::std::string&& value);
  #endif
  void set_type_keys(int index, const char* value);
  void set_type_keys(int index, const char* value, size_t size);
  ::std::string* add_type_keys();
  void add_type_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_type_keys(::std::string&& value);
  #endif
  void add_type_keys(const char* value);
  void add_type_keys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& type_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_type_keys();

  // repeated string type_variation_keys = 4;
  int type_variation_keys_size() const;
  void clear_type_variation_keys();
  static const int kTypeVariationKeysFieldNumber = 4;
  const ::std::string& type_variation_keys(int index) const;
  ::std::string* mutable_type_variation_keys(int index);
  void set_type_variation_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_type_variation_keys(int index, ::std::string&& value);
  #endif
  void set_type_variation_keys(int index, const char* value);
  void set_type_variation_keys(int index, const char* value, size_t size);
  ::std::string* add_type_variation_keys();
  void add_type_variation_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_type_variation_keys(::std::string&& value);
  #endif
  void add_type_variation_keys(const char* value);
  void add_type_variation_keys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& type_variation_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_type_variation_keys();

  // string uri = 1;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // @@protoc_insertion_point(class_scope:substrait.Capabilities.SimpleExtension)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> function_keys_;
  ::google::protobuf::RepeatedPtrField< ::std::string> type_keys_;
  ::google::protobuf::RepeatedPtrField< ::std::string> type_variation_keys_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_substrait_2fcapabilities_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Capabilities : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:substrait.Capabilities) */ {
 public:
  Capabilities();
  virtual ~Capabilities();

  Capabilities(const Capabilities& from);

  inline Capabilities& operator=(const Capabilities& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Capabilities(Capabilities&& from) noexcept
    : Capabilities() {
    *this = ::std::move(from);
  }

  inline Capabilities& operator=(Capabilities&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Capabilities& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Capabilities* internal_default_instance() {
    return reinterpret_cast<const Capabilities*>(
               &_Capabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Capabilities* other);
  friend void swap(Capabilities& a, Capabilities& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Capabilities* New() const final {
    return CreateMaybeMessage<Capabilities>(NULL);
  }

  Capabilities* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Capabilities>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Capabilities& from);
  void MergeFrom(const Capabilities& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Capabilities* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Capabilities_SimpleExtension SimpleExtension;

  // accessors -------------------------------------------------------

  // repeated string substrait_versions = 1;
  int substrait_versions_size() const;
  void clear_substrait_versions();
  static const int kSubstraitVersionsFieldNumber = 1;
  const ::std::string& substrait_versions(int index) const;
  ::std::string* mutable_substrait_versions(int index);
  void set_substrait_versions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_substrait_versions(int index, ::std::string&& value);
  #endif
  void set_substrait_versions(int index, const char* value);
  void set_substrait_versions(int index, const char* value, size_t size);
  ::std::string* add_substrait_versions();
  void add_substrait_versions(const ::std::string& value);
  #if LANG_CXX11
  void add_substrait_versions(::std::string&& value);
  #endif
  void add_substrait_versions(const char* value);
  void add_substrait_versions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& substrait_versions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_substrait_versions();

  // repeated string advanced_extension_type_urls = 2;
  int advanced_extension_type_urls_size() const;
  void clear_advanced_extension_type_urls();
  static const int kAdvancedExtensionTypeUrlsFieldNumber = 2;
  const ::std::string& advanced_extension_type_urls(int index) const;
  ::std::string* mutable_advanced_extension_type_urls(int index);
  void set_advanced_extension_type_urls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_advanced_extension_type_urls(int index, ::std::string&& value);
  #endif
  void set_advanced_extension_type_urls(int index, const char* value);
  void set_advanced_extension_type_urls(int index, const char* value, size_t size);
  ::std::string* add_advanced_extension_type_urls();
  void add_advanced_extension_type_urls(const ::std::string& value);
  #if LANG_CXX11
  void add_advanced_extension_type_urls(::std::string&& value);
  #endif
  void add_advanced_extension_type_urls(const char* value);
  void add_advanced_extension_type_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& advanced_extension_type_urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_advanced_extension_type_urls();

  // repeated .substrait.Capabilities.SimpleExtension simple_extensions = 3;
  int simple_extensions_size() const;
  void clear_simple_extensions();
  static const int kSimpleExtensionsFieldNumber = 3;
  ::substrait::Capabilities_SimpleExtension* mutable_simple_extensions(int index);
  ::google::protobuf::RepeatedPtrField< ::substrait::Capabilities_SimpleExtension >*
      mutable_simple_extensions();
  const ::substrait::Capabilities_SimpleExtension& simple_extensions(int index) const;
  ::substrait::Capabilities_SimpleExtension* add_simple_extensions();
  const ::google::protobuf::RepeatedPtrField< ::substrait::Capabilities_SimpleExtension >&
      simple_extensions() const;

  // @@protoc_insertion_point(class_scope:substrait.Capabilities)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> substrait_versions_;
  ::google::protobuf::RepeatedPtrField< ::std::string> advanced_extension_type_urls_;
  ::google::protobuf::RepeatedPtrField< ::substrait::Capabilities_SimpleExtension > simple_extensions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_substrait_2fcapabilities_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Capabilities_SimpleExtension

// string uri = 1;
inline void Capabilities_SimpleExtension::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Capabilities_SimpleExtension::uri() const {
  // @@protoc_insertion_point(field_get:substrait.Capabilities.SimpleExtension.uri)
  return uri_.GetNoArena();
}
inline void Capabilities_SimpleExtension::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:substrait.Capabilities.SimpleExtension.uri)
}
#if LANG_CXX11
inline void Capabilities_SimpleExtension::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:substrait.Capabilities.SimpleExtension.uri)
}
#endif
inline void Capabilities_SimpleExtension::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:substrait.Capabilities.SimpleExtension.uri)
}
inline void Capabilities_SimpleExtension::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:substrait.Capabilities.SimpleExtension.uri)
}
inline ::std::string* Capabilities_SimpleExtension::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:substrait.Capabilities.SimpleExtension.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Capabilities_SimpleExtension::release_uri() {
  // @@protoc_insertion_point(field_release:substrait.Capabilities.SimpleExtension.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Capabilities_SimpleExtension::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:substrait.Capabilities.SimpleExtension.uri)
}

// repeated string function_keys = 2;
inline int Capabilities_SimpleExtension::function_keys_size() const {
  return function_keys_.size();
}
inline void Capabilities_SimpleExtension::clear_function_keys() {
  function_keys_.Clear();
}
inline const ::std::string& Capabilities_SimpleExtension::function_keys(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Capabilities.SimpleExtension.function_keys)
  return function_keys_.Get(index);
}
inline ::std::string* Capabilities_SimpleExtension::mutable_function_keys(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Capabilities.SimpleExtension.function_keys)
  return function_keys_.Mutable(index);
}
inline void Capabilities_SimpleExtension::set_function_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:substrait.Capabilities.SimpleExtension.function_keys)
  function_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Capabilities_SimpleExtension::set_function_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.Capabilities.SimpleExtension.function_keys)
  function_keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Capabilities_SimpleExtension::set_function_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  function_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.Capabilities.SimpleExtension.function_keys)
}
inline void Capabilities_SimpleExtension::set_function_keys(int index, const char* value, size_t size) {
  function_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.Capabilities.SimpleExtension.function_keys)
}
inline ::std::string* Capabilities_SimpleExtension::add_function_keys() {
  // @@protoc_insertion_point(field_add_mutable:substrait.Capabilities.SimpleExtension.function_keys)
  return function_keys_.Add();
}
inline void Capabilities_SimpleExtension::add_function_keys(const ::std::string& value) {
  function_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.Capabilities.SimpleExtension.function_keys)
}
#if LANG_CXX11
inline void Capabilities_SimpleExtension::add_function_keys(::std::string&& value) {
  function_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.Capabilities.SimpleExtension.function_keys)
}
#endif
inline void Capabilities_SimpleExtension::add_function_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  function_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.Capabilities.SimpleExtension.function_keys)
}
inline void Capabilities_SimpleExtension::add_function_keys(const char* value, size_t size) {
  function_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.Capabilities.SimpleExtension.function_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Capabilities_SimpleExtension::function_keys() const {
  // @@protoc_insertion_point(field_list:substrait.Capabilities.SimpleExtension.function_keys)
  return function_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Capabilities_SimpleExtension::mutable_function_keys() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Capabilities.SimpleExtension.function_keys)
  return &function_keys_;
}

// repeated string type_keys = 3;
inline int Capabilities_SimpleExtension::type_keys_size() const {
  return type_keys_.size();
}
inline void Capabilities_SimpleExtension::clear_type_keys() {
  type_keys_.Clear();
}
inline const ::std::string& Capabilities_SimpleExtension::type_keys(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Capabilities.SimpleExtension.type_keys)
  return type_keys_.Get(index);
}
inline ::std::string* Capabilities_SimpleExtension::mutable_type_keys(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Capabilities.SimpleExtension.type_keys)
  return type_keys_.Mutable(index);
}
inline void Capabilities_SimpleExtension::set_type_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:substrait.Capabilities.SimpleExtension.type_keys)
  type_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Capabilities_SimpleExtension::set_type_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.Capabilities.SimpleExtension.type_keys)
  type_keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Capabilities_SimpleExtension::set_type_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  type_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.Capabilities.SimpleExtension.type_keys)
}
inline void Capabilities_SimpleExtension::set_type_keys(int index, const char* value, size_t size) {
  type_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.Capabilities.SimpleExtension.type_keys)
}
inline ::std::string* Capabilities_SimpleExtension::add_type_keys() {
  // @@protoc_insertion_point(field_add_mutable:substrait.Capabilities.SimpleExtension.type_keys)
  return type_keys_.Add();
}
inline void Capabilities_SimpleExtension::add_type_keys(const ::std::string& value) {
  type_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.Capabilities.SimpleExtension.type_keys)
}
#if LANG_CXX11
inline void Capabilities_SimpleExtension::add_type_keys(::std::string&& value) {
  type_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.Capabilities.SimpleExtension.type_keys)
}
#endif
inline void Capabilities_SimpleExtension::add_type_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  type_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.Capabilities.SimpleExtension.type_keys)
}
inline void Capabilities_SimpleExtension::add_type_keys(const char* value, size_t size) {
  type_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.Capabilities.SimpleExtension.type_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Capabilities_SimpleExtension::type_keys() const {
  // @@protoc_insertion_point(field_list:substrait.Capabilities.SimpleExtension.type_keys)
  return type_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Capabilities_SimpleExtension::mutable_type_keys() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Capabilities.SimpleExtension.type_keys)
  return &type_keys_;
}

// repeated string type_variation_keys = 4;
inline int Capabilities_SimpleExtension::type_variation_keys_size() const {
  return type_variation_keys_.size();
}
inline void Capabilities_SimpleExtension::clear_type_variation_keys() {
  type_variation_keys_.Clear();
}
inline const ::std::string& Capabilities_SimpleExtension::type_variation_keys(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Capabilities.SimpleExtension.type_variation_keys)
  return type_variation_keys_.Get(index);
}
inline ::std::string* Capabilities_SimpleExtension::mutable_type_variation_keys(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Capabilities.SimpleExtension.type_variation_keys)
  return type_variation_keys_.Mutable(index);
}
inline void Capabilities_SimpleExtension::set_type_variation_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:substrait.Capabilities.SimpleExtension.type_variation_keys)
  type_variation_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Capabilities_SimpleExtension::set_type_variation_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.Capabilities.SimpleExtension.type_variation_keys)
  type_variation_keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Capabilities_SimpleExtension::set_type_variation_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  type_variation_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.Capabilities.SimpleExtension.type_variation_keys)
}
inline void Capabilities_SimpleExtension::set_type_variation_keys(int index, const char* value, size_t size) {
  type_variation_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.Capabilities.SimpleExtension.type_variation_keys)
}
inline ::std::string* Capabilities_SimpleExtension::add_type_variation_keys() {
  // @@protoc_insertion_point(field_add_mutable:substrait.Capabilities.SimpleExtension.type_variation_keys)
  return type_variation_keys_.Add();
}
inline void Capabilities_SimpleExtension::add_type_variation_keys(const ::std::string& value) {
  type_variation_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.Capabilities.SimpleExtension.type_variation_keys)
}
#if LANG_CXX11
inline void Capabilities_SimpleExtension::add_type_variation_keys(::std::string&& value) {
  type_variation_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.Capabilities.SimpleExtension.type_variation_keys)
}
#endif
inline void Capabilities_SimpleExtension::add_type_variation_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  type_variation_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.Capabilities.SimpleExtension.type_variation_keys)
}
inline void Capabilities_SimpleExtension::add_type_variation_keys(const char* value, size_t size) {
  type_variation_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.Capabilities.SimpleExtension.type_variation_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Capabilities_SimpleExtension::type_variation_keys() const {
  // @@protoc_insertion_point(field_list:substrait.Capabilities.SimpleExtension.type_variation_keys)
  return type_variation_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Capabilities_SimpleExtension::mutable_type_variation_keys() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Capabilities.SimpleExtension.type_variation_keys)
  return &type_variation_keys_;
}

// -------------------------------------------------------------------

// Capabilities

// repeated string substrait_versions = 1;
inline int Capabilities::substrait_versions_size() const {
  return substrait_versions_.size();
}
inline void Capabilities::clear_substrait_versions() {
  substrait_versions_.Clear();
}
inline const ::std::string& Capabilities::substrait_versions(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Capabilities.substrait_versions)
  return substrait_versions_.Get(index);
}
inline ::std::string* Capabilities::mutable_substrait_versions(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Capabilities.substrait_versions)
  return substrait_versions_.Mutable(index);
}
inline void Capabilities::set_substrait_versions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:substrait.Capabilities.substrait_versions)
  substrait_versions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Capabilities::set_substrait_versions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.Capabilities.substrait_versions)
  substrait_versions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Capabilities::set_substrait_versions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  substrait_versions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.Capabilities.substrait_versions)
}
inline void Capabilities::set_substrait_versions(int index, const char* value, size_t size) {
  substrait_versions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.Capabilities.substrait_versions)
}
inline ::std::string* Capabilities::add_substrait_versions() {
  // @@protoc_insertion_point(field_add_mutable:substrait.Capabilities.substrait_versions)
  return substrait_versions_.Add();
}
inline void Capabilities::add_substrait_versions(const ::std::string& value) {
  substrait_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.Capabilities.substrait_versions)
}
#if LANG_CXX11
inline void Capabilities::add_substrait_versions(::std::string&& value) {
  substrait_versions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.Capabilities.substrait_versions)
}
#endif
inline void Capabilities::add_substrait_versions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  substrait_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.Capabilities.substrait_versions)
}
inline void Capabilities::add_substrait_versions(const char* value, size_t size) {
  substrait_versions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.Capabilities.substrait_versions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Capabilities::substrait_versions() const {
  // @@protoc_insertion_point(field_list:substrait.Capabilities.substrait_versions)
  return substrait_versions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Capabilities::mutable_substrait_versions() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Capabilities.substrait_versions)
  return &substrait_versions_;
}

// repeated string advanced_extension_type_urls = 2;
inline int Capabilities::advanced_extension_type_urls_size() const {
  return advanced_extension_type_urls_.size();
}
inline void Capabilities::clear_advanced_extension_type_urls() {
  advanced_extension_type_urls_.Clear();
}
inline const ::std::string& Capabilities::advanced_extension_type_urls(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Capabilities.advanced_extension_type_urls)
  return advanced_extension_type_urls_.Get(index);
}
inline ::std::string* Capabilities::mutable_advanced_extension_type_urls(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Capabilities.advanced_extension_type_urls)
  return advanced_extension_type_urls_.Mutable(index);
}
inline void Capabilities::set_advanced_extension_type_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:substrait.Capabilities.advanced_extension_type_urls)
  advanced_extension_type_urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Capabilities::set_advanced_extension_type_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.Capabilities.advanced_extension_type_urls)
  advanced_extension_type_urls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Capabilities::set_advanced_extension_type_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  advanced_extension_type_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.Capabilities.advanced_extension_type_urls)
}
inline void Capabilities::set_advanced_extension_type_urls(int index, const char* value, size_t size) {
  advanced_extension_type_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.Capabilities.advanced_extension_type_urls)
}
inline ::std::string* Capabilities::add_advanced_extension_type_urls() {
  // @@protoc_insertion_point(field_add_mutable:substrait.Capabilities.advanced_extension_type_urls)
  return advanced_extension_type_urls_.Add();
}
inline void Capabilities::add_advanced_extension_type_urls(const ::std::string& value) {
  advanced_extension_type_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.Capabilities.advanced_extension_type_urls)
}
#if LANG_CXX11
inline void Capabilities::add_advanced_extension_type_urls(::std::string&& value) {
  advanced_extension_type_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.Capabilities.advanced_extension_type_urls)
}
#endif
inline void Capabilities::add_advanced_extension_type_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  advanced_extension_type_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.Capabilities.advanced_extension_type_urls)
}
inline void Capabilities::add_advanced_extension_type_urls(const char* value, size_t size) {
  advanced_extension_type_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.Capabilities.advanced_extension_type_urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Capabilities::advanced_extension_type_urls() const {
  // @@protoc_insertion_point(field_list:substrait.Capabilities.advanced_extension_type_urls)
  return advanced_extension_type_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Capabilities::mutable_advanced_extension_type_urls() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Capabilities.advanced_extension_type_urls)
  return &advanced_extension_type_urls_;
}

// repeated .substrait.Capabilities.SimpleExtension simple_extensions = 3;
inline int Capabilities::simple_extensions_size() const {
  return simple_extensions_.size();
}
inline void Capabilities::clear_simple_extensions() {
  simple_extensions_.Clear();
}
inline ::substrait::Capabilities_SimpleExtension* Capabilities::mutable_simple_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Capabilities.simple_extensions)
  return simple_extensions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::substrait::Capabilities_SimpleExtension >*
Capabilities::mutable_simple_extensions() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Capabilities.simple_extensions)
  return &simple_extensions_;
}
inline const ::substrait::Capabilities_SimpleExtension& Capabilities::simple_extensions(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Capabilities.simple_extensions)
  return simple_extensions_.Get(index);
}
inline ::substrait::Capabilities_SimpleExtension* Capabilities::add_simple_extensions() {
  // @@protoc_insertion_point(field_add:substrait.Capabilities.simple_extensions)
  return simple_extensions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::substrait::Capabilities_SimpleExtension >&
Capabilities::simple_extensions() const {
  // @@protoc_insertion_point(field_list:substrait.Capabilities.simple_extensions)
  return simple_extensions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace substrait

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_substrait_2fcapabilities_2eproto
