// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/plan.proto

#include "substrait/plan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_substrait_2falgebra_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substrait_2falgebra_2eproto ::google::protobuf::internal::SCCInfo<18> scc_info_AggregateFunction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substrait_2falgebra_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RelRoot;
}  // namespace protobuf_substrait_2falgebra_2eproto
namespace protobuf_substrait_2fextensions_2fextensions_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substrait_2fextensions_2fextensions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SimpleExtensionURI;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substrait_2fextensions_2fextensions_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AdvancedExtension;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substrait_2fextensions_2fextensions_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_SimpleExtensionDeclaration;
}  // namespace protobuf_substrait_2fextensions_2fextensions_2eproto
namespace protobuf_substrait_2fplan_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substrait_2fplan_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Version;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_substrait_2fplan_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PlanRel;
}  // namespace protobuf_substrait_2fplan_2eproto
namespace substrait {
class PlanRelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlanRel>
      _instance;
  const ::substrait::Rel* rel_;
  const ::substrait::RelRoot* root_;
} _PlanRel_default_instance_;
class PlanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Plan>
      _instance;
} _Plan_default_instance_;
class PlanVersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlanVersion>
      _instance;
} _PlanVersion_default_instance_;
class VersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Version>
      _instance;
} _Version_default_instance_;
}  // namespace substrait
namespace protobuf_substrait_2fplan_2eproto {
static void InitDefaultsPlanRel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::_PlanRel_default_instance_;
    new (ptr) ::substrait::PlanRel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::PlanRel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PlanRel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPlanRel}, {
      &protobuf_substrait_2falgebra_2eproto::scc_info_AggregateFunction.base,
      &protobuf_substrait_2falgebra_2eproto::scc_info_RelRoot.base,}};

static void InitDefaultsPlan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::_Plan_default_instance_;
    new (ptr) ::substrait::Plan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::Plan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Plan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsPlan}, {
      &protobuf_substrait_2fplan_2eproto::scc_info_Version.base,
      &protobuf_substrait_2fextensions_2fextensions_2eproto::scc_info_SimpleExtensionURI.base,
      &protobuf_substrait_2fextensions_2fextensions_2eproto::scc_info_SimpleExtensionDeclaration.base,
      &protobuf_substrait_2fplan_2eproto::scc_info_PlanRel.base,
      &protobuf_substrait_2fextensions_2fextensions_2eproto::scc_info_AdvancedExtension.base,}};

static void InitDefaultsPlanVersion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::_PlanVersion_default_instance_;
    new (ptr) ::substrait::PlanVersion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::PlanVersion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlanVersion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlanVersion}, {
      &protobuf_substrait_2fplan_2eproto::scc_info_Version.base,}};

static void InitDefaultsVersion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::_Version_default_instance_;
    new (ptr) ::substrait::Version();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::Version::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Version =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVersion}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PlanRel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Plan.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlanVersion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Version.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::substrait::PlanRel, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::substrait::PlanRel, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::PlanRelDefaultTypeInternal, rel_),
  offsetof(::substrait::PlanRelDefaultTypeInternal, root_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::substrait::PlanRel, rel_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::substrait::Plan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::substrait::Plan, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::substrait::Plan, extension_uris_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::substrait::Plan, extensions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::substrait::Plan, relations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::substrait::Plan, advanced_extensions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::substrait::Plan, expected_type_urls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::substrait::PlanVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::substrait::PlanVersion, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::substrait::Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::substrait::Version, major_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::substrait::Version, minor_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::substrait::Version, patch_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::substrait::Version, git_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::substrait::Version, producer_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::substrait::PlanRel)},
  { 8, -1, sizeof(::substrait::Plan)},
  { 19, -1, sizeof(::substrait::PlanVersion)},
  { 25, -1, sizeof(::substrait::Version)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::substrait::_PlanRel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::substrait::_Plan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::substrait::_PlanVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::substrait::_Version_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "substrait/plan.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024substrait/plan.proto\022\tsubstrait\032\027subst"
      "rait/algebra.proto\032%substrait/extensions"
      "/extensions.proto\"X\n\007PlanRel\022\035\n\003rel\030\001 \001("
      "\0132\016.substrait.RelH\000\022\"\n\004root\030\002 \001(\0132\022.subs"
      "trait.RelRootH\000B\n\n\010rel_type\"\274\002\n\004Plan\022#\n\007"
      "version\030\006 \001(\0132\022.substrait.Version\022@\n\016ext"
      "ension_uris\030\001 \003(\0132(.substrait.extensions"
      ".SimpleExtensionURI\022D\n\nextensions\030\002 \003(\0132"
      "0.substrait.extensions.SimpleExtensionDe"
      "claration\022%\n\trelations\030\003 \003(\0132\022.substrait"
      ".PlanRel\022D\n\023advanced_extensions\030\004 \001(\0132\'."
      "substrait.extensions.AdvancedExtension\022\032"
      "\n\022expected_type_urls\030\005 \003(\t\"2\n\013PlanVersio"
      "n\022#\n\007version\030\006 \001(\0132\022.substrait.Version\"o"
      "\n\007Version\022\024\n\014major_number\030\001 \001(\r\022\024\n\014minor"
      "_number\030\002 \001(\r\022\024\n\014patch_number\030\003 \001(\r\022\020\n\010g"
      "it_hash\030\004 \001(\t\022\020\n\010producer\030\005 \001(\tBW\n\022io.su"
      "bstrait.protoP\001Z*github.com/substrait-io"
      "/substrait-go/proto\252\002\022Substrait.Protobuf"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 768);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "substrait/plan.proto", &protobuf_RegisterTypes);
  ::protobuf_substrait_2falgebra_2eproto::AddDescriptors();
  ::protobuf_substrait_2fextensions_2fextensions_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_substrait_2fplan_2eproto
namespace substrait {

// ===================================================================

void PlanRel::InitAsDefaultInstance() {
  ::substrait::_PlanRel_default_instance_.rel_ = const_cast< ::substrait::Rel*>(
      ::substrait::Rel::internal_default_instance());
  ::substrait::_PlanRel_default_instance_.root_ = const_cast< ::substrait::RelRoot*>(
      ::substrait::RelRoot::internal_default_instance());
}
void PlanRel::set_allocated_rel(::substrait::Rel* rel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rel_type();
  if (rel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rel, submessage_arena);
    }
    set_has_rel();
    rel_type_.rel_ = rel;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.PlanRel.rel)
}
void PlanRel::clear_rel() {
  if (has_rel()) {
    delete rel_type_.rel_;
    clear_has_rel_type();
  }
}
void PlanRel::set_allocated_root(::substrait::RelRoot* root) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rel_type();
  if (root) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      root = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    set_has_root();
    rel_type_.root_ = root;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.PlanRel.root)
}
void PlanRel::clear_root() {
  if (has_root()) {
    delete rel_type_.root_;
    clear_has_rel_type();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanRel::kRelFieldNumber;
const int PlanRel::kRootFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanRel::PlanRel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substrait_2fplan_2eproto::scc_info_PlanRel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:substrait.PlanRel)
}
PlanRel::PlanRel(const PlanRel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_rel_type();
  switch (from.rel_type_case()) {
    case kRel: {
      mutable_rel()->::substrait::Rel::MergeFrom(from.rel());
      break;
    }
    case kRoot: {
      mutable_root()->::substrait::RelRoot::MergeFrom(from.root());
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.PlanRel)
}

void PlanRel::SharedCtor() {
  clear_has_rel_type();
}

PlanRel::~PlanRel() {
  // @@protoc_insertion_point(destructor:substrait.PlanRel)
  SharedDtor();
}

void PlanRel::SharedDtor() {
  if (has_rel_type()) {
    clear_rel_type();
  }
}

void PlanRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlanRel::descriptor() {
  ::protobuf_substrait_2fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substrait_2fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanRel& PlanRel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substrait_2fplan_2eproto::scc_info_PlanRel.base);
  return *internal_default_instance();
}


void PlanRel::clear_rel_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.PlanRel)
  switch (rel_type_case()) {
    case kRel: {
      delete rel_type_.rel_;
      break;
    }
    case kRoot: {
      delete rel_type_.root_;
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REL_TYPE_NOT_SET;
}


void PlanRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.PlanRel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rel_type();
  _internal_metadata_.Clear();
}

bool PlanRel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:substrait.PlanRel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .substrait.Rel rel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .substrait.RelRoot root = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_root()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:substrait.PlanRel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:substrait.PlanRel)
  return false;
#undef DO_
}

void PlanRel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:substrait.PlanRel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Rel rel = 1;
  if (has_rel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_rel(), output);
  }

  // .substrait.RelRoot root = 2;
  if (has_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_root(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:substrait.PlanRel)
}

::google::protobuf::uint8* PlanRel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:substrait.PlanRel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Rel rel = 1;
  if (has_rel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_rel(), deterministic, target);
  }

  // .substrait.RelRoot root = 2;
  if (has_root()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_root(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.PlanRel)
  return target;
}

size_t PlanRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.PlanRel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (rel_type_case()) {
    // .substrait.Rel rel = 1;
    case kRel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rel_type_.rel_);
      break;
    }
    // .substrait.RelRoot root = 2;
    case kRoot: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rel_type_.root_);
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanRel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.PlanRel)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanRel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanRel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.PlanRel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.PlanRel)
    MergeFrom(*source);
  }
}

void PlanRel::MergeFrom(const PlanRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.PlanRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rel_type_case()) {
    case kRel: {
      mutable_rel()->::substrait::Rel::MergeFrom(from.rel());
      break;
    }
    case kRoot: {
      mutable_root()->::substrait::RelRoot::MergeFrom(from.root());
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
}

void PlanRel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.PlanRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanRel::CopyFrom(const PlanRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.PlanRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanRel::IsInitialized() const {
  return true;
}

void PlanRel::Swap(PlanRel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanRel::InternalSwap(PlanRel* other) {
  using std::swap;
  swap(rel_type_, other->rel_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlanRel::GetMetadata() const {
  protobuf_substrait_2fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substrait_2fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Plan::InitAsDefaultInstance() {
  ::substrait::_Plan_default_instance_._instance.get_mutable()->version_ = const_cast< ::substrait::Version*>(
      ::substrait::Version::internal_default_instance());
  ::substrait::_Plan_default_instance_._instance.get_mutable()->advanced_extensions_ = const_cast< ::substrait::extensions::AdvancedExtension*>(
      ::substrait::extensions::AdvancedExtension::internal_default_instance());
}
void Plan::clear_extension_uris() {
  extension_uris_.Clear();
}
void Plan::clear_extensions() {
  extensions_.Clear();
}
void Plan::clear_advanced_extensions() {
  if (GetArenaNoVirtual() == NULL && advanced_extensions_ != NULL) {
    delete advanced_extensions_;
  }
  advanced_extensions_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Plan::kVersionFieldNumber;
const int Plan::kExtensionUrisFieldNumber;
const int Plan::kExtensionsFieldNumber;
const int Plan::kRelationsFieldNumber;
const int Plan::kAdvancedExtensionsFieldNumber;
const int Plan::kExpectedTypeUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Plan::Plan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substrait_2fplan_2eproto::scc_info_Plan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:substrait.Plan)
}
Plan::Plan(const Plan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      extension_uris_(from.extension_uris_),
      extensions_(from.extensions_),
      relations_(from.relations_),
      expected_type_urls_(from.expected_type_urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_advanced_extensions()) {
    advanced_extensions_ = new ::substrait::extensions::AdvancedExtension(*from.advanced_extensions_);
  } else {
    advanced_extensions_ = NULL;
  }
  if (from.has_version()) {
    version_ = new ::substrait::Version(*from.version_);
  } else {
    version_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Plan)
}

void Plan::SharedCtor() {
  ::memset(&advanced_extensions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&advanced_extensions_)) + sizeof(version_));
}

Plan::~Plan() {
  // @@protoc_insertion_point(destructor:substrait.Plan)
  SharedDtor();
}

void Plan::SharedDtor() {
  if (this != internal_default_instance()) delete advanced_extensions_;
  if (this != internal_default_instance()) delete version_;
}

void Plan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Plan::descriptor() {
  ::protobuf_substrait_2fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substrait_2fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Plan& Plan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substrait_2fplan_2eproto::scc_info_Plan.base);
  return *internal_default_instance();
}


void Plan::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Plan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_uris_.Clear();
  extensions_.Clear();
  relations_.Clear();
  expected_type_urls_.Clear();
  if (GetArenaNoVirtual() == NULL && advanced_extensions_ != NULL) {
    delete advanced_extensions_;
  }
  advanced_extensions_ = NULL;
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
  _internal_metadata_.Clear();
}

bool Plan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:substrait.Plan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extension_uris()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .substrait.PlanRel relations = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_relations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .substrait.extensions.AdvancedExtension advanced_extensions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_advanced_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string expected_type_urls = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_expected_type_urls()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->expected_type_urls(this->expected_type_urls_size() - 1).data(),
            static_cast<int>(this->expected_type_urls(this->expected_type_urls_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "substrait.Plan.expected_type_urls"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .substrait.Version version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:substrait.Plan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:substrait.Plan)
  return false;
#undef DO_
}

void Plan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:substrait.Plan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_uris_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->extension_uris(static_cast<int>(i)),
      output);
  }

  // repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extensions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->extensions(static_cast<int>(i)),
      output);
  }

  // repeated .substrait.PlanRel relations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->relations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->relations(static_cast<int>(i)),
      output);
  }

  // .substrait.extensions.AdvancedExtension advanced_extensions = 4;
  if (this->has_advanced_extensions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_advanced_extensions(), output);
  }

  // repeated string expected_type_urls = 5;
  for (int i = 0, n = this->expected_type_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expected_type_urls(i).data(), static_cast<int>(this->expected_type_urls(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "substrait.Plan.expected_type_urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->expected_type_urls(i), output);
  }

  // .substrait.Version version = 6;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:substrait.Plan)
}

::google::protobuf::uint8* Plan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Plan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_uris_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->extension_uris(static_cast<int>(i)), deterministic, target);
  }

  // repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extensions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->extensions(static_cast<int>(i)), deterministic, target);
  }

  // repeated .substrait.PlanRel relations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->relations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->relations(static_cast<int>(i)), deterministic, target);
  }

  // .substrait.extensions.AdvancedExtension advanced_extensions = 4;
  if (this->has_advanced_extensions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_advanced_extensions(), deterministic, target);
  }

  // repeated string expected_type_urls = 5;
  for (int i = 0, n = this->expected_type_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expected_type_urls(i).data(), static_cast<int>(this->expected_type_urls(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "substrait.Plan.expected_type_urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->expected_type_urls(i), target);
  }

  // .substrait.Version version = 6;
  if (this->has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_version(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Plan)
  return target;
}

size_t Plan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Plan)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->extension_uris_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extension_uris(static_cast<int>(i)));
    }
  }

  // repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->extensions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extensions(static_cast<int>(i)));
    }
  }

  // repeated .substrait.PlanRel relations = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->relations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->relations(static_cast<int>(i)));
    }
  }

  // repeated string expected_type_urls = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->expected_type_urls_size());
  for (int i = 0, n = this->expected_type_urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->expected_type_urls(i));
  }

  // .substrait.extensions.AdvancedExtension advanced_extensions = 4;
  if (this->has_advanced_extensions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *advanced_extensions_);
  }

  // .substrait.Version version = 6;
  if (this->has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *version_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Plan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.Plan)
  GOOGLE_DCHECK_NE(&from, this);
  const Plan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Plan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.Plan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.Plan)
    MergeFrom(*source);
  }
}

void Plan::MergeFrom(const Plan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.Plan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extension_uris_.MergeFrom(from.extension_uris_);
  extensions_.MergeFrom(from.extensions_);
  relations_.MergeFrom(from.relations_);
  expected_type_urls_.MergeFrom(from.expected_type_urls_);
  if (from.has_advanced_extensions()) {
    mutable_advanced_extensions()->::substrait::extensions::AdvancedExtension::MergeFrom(from.advanced_extensions());
  }
  if (from.has_version()) {
    mutable_version()->::substrait::Version::MergeFrom(from.version());
  }
}

void Plan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.Plan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plan::CopyFrom(const Plan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Plan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plan::IsInitialized() const {
  return true;
}

void Plan::Swap(Plan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Plan::InternalSwap(Plan* other) {
  using std::swap;
  CastToBase(&extension_uris_)->InternalSwap(CastToBase(&other->extension_uris_));
  CastToBase(&extensions_)->InternalSwap(CastToBase(&other->extensions_));
  CastToBase(&relations_)->InternalSwap(CastToBase(&other->relations_));
  expected_type_urls_.InternalSwap(CastToBase(&other->expected_type_urls_));
  swap(advanced_extensions_, other->advanced_extensions_);
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Plan::GetMetadata() const {
  protobuf_substrait_2fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substrait_2fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlanVersion::InitAsDefaultInstance() {
  ::substrait::_PlanVersion_default_instance_._instance.get_mutable()->version_ = const_cast< ::substrait::Version*>(
      ::substrait::Version::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanVersion::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanVersion::PlanVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substrait_2fplan_2eproto::scc_info_PlanVersion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:substrait.PlanVersion)
}
PlanVersion::PlanVersion(const PlanVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_version()) {
    version_ = new ::substrait::Version(*from.version_);
  } else {
    version_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.PlanVersion)
}

void PlanVersion::SharedCtor() {
  version_ = NULL;
}

PlanVersion::~PlanVersion() {
  // @@protoc_insertion_point(destructor:substrait.PlanVersion)
  SharedDtor();
}

void PlanVersion::SharedDtor() {
  if (this != internal_default_instance()) delete version_;
}

void PlanVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlanVersion::descriptor() {
  ::protobuf_substrait_2fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substrait_2fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanVersion& PlanVersion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substrait_2fplan_2eproto::scc_info_PlanVersion.base);
  return *internal_default_instance();
}


void PlanVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.PlanVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
  _internal_metadata_.Clear();
}

bool PlanVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:substrait.PlanVersion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .substrait.Version version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:substrait.PlanVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:substrait.PlanVersion)
  return false;
#undef DO_
}

void PlanVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:substrait.PlanVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Version version = 6;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:substrait.PlanVersion)
}

::google::protobuf::uint8* PlanVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:substrait.PlanVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Version version = 6;
  if (this->has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_version(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.PlanVersion)
  return target;
}

size_t PlanVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.PlanVersion)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .substrait.Version version = 6;
  if (this->has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *version_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.PlanVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.PlanVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.PlanVersion)
    MergeFrom(*source);
  }
}

void PlanVersion::MergeFrom(const PlanVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.PlanVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_version()) {
    mutable_version()->::substrait::Version::MergeFrom(from.version());
  }
}

void PlanVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.PlanVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanVersion::CopyFrom(const PlanVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.PlanVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanVersion::IsInitialized() const {
  return true;
}

void PlanVersion::Swap(PlanVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanVersion::InternalSwap(PlanVersion* other) {
  using std::swap;
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlanVersion::GetMetadata() const {
  protobuf_substrait_2fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substrait_2fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Version::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Version::kMajorNumberFieldNumber;
const int Version::kMinorNumberFieldNumber;
const int Version::kPatchNumberFieldNumber;
const int Version::kGitHashFieldNumber;
const int Version::kProducerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Version::Version()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_substrait_2fplan_2eproto::scc_info_Version.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:substrait.Version)
}
Version::Version(const Version& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  git_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.git_hash().size() > 0) {
    git_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.git_hash_);
  }
  producer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.producer().size() > 0) {
    producer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer_);
  }
  ::memcpy(&major_number_, &from.major_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_number_) -
    reinterpret_cast<char*>(&major_number_)) + sizeof(patch_number_));
  // @@protoc_insertion_point(copy_constructor:substrait.Version)
}

void Version::SharedCtor() {
  git_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  producer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&major_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_number_) -
      reinterpret_cast<char*>(&major_number_)) + sizeof(patch_number_));
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:substrait.Version)
  SharedDtor();
}

void Version::SharedDtor() {
  git_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  producer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Version::descriptor() {
  ::protobuf_substrait_2fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substrait_2fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Version& Version::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_substrait_2fplan_2eproto::scc_info_Version.base);
  return *internal_default_instance();
}


void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  git_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  producer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&major_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_number_) -
      reinterpret_cast<char*>(&major_number_)) + sizeof(patch_number_));
  _internal_metadata_.Clear();
}

bool Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:substrait.Version)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 major_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 minor_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 patch_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &patch_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string git_hash = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_git_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->git_hash().data(), static_cast<int>(this->git_hash().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "substrait.Version.git_hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string producer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->producer().data(), static_cast<int>(this->producer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "substrait.Version.producer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:substrait.Version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:substrait.Version)
  return false;
#undef DO_
}

void Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:substrait.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major_number = 1;
  if (this->major_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->major_number(), output);
  }

  // uint32 minor_number = 2;
  if (this->minor_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minor_number(), output);
  }

  // uint32 patch_number = 3;
  if (this->patch_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->patch_number(), output);
  }

  // string git_hash = 4;
  if (this->git_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->git_hash().data(), static_cast<int>(this->git_hash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "substrait.Version.git_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->git_hash(), output);
  }

  // string producer = 5;
  if (this->producer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer().data(), static_cast<int>(this->producer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "substrait.Version.producer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->producer(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:substrait.Version)
}

::google::protobuf::uint8* Version::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major_number = 1;
  if (this->major_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->major_number(), target);
  }

  // uint32 minor_number = 2;
  if (this->minor_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minor_number(), target);
  }

  // uint32 patch_number = 3;
  if (this->patch_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->patch_number(), target);
  }

  // string git_hash = 4;
  if (this->git_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->git_hash().data(), static_cast<int>(this->git_hash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "substrait.Version.git_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->git_hash(), target);
  }

  // string producer = 5;
  if (this->producer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer().data(), static_cast<int>(this->producer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "substrait.Version.producer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->producer(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Version)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string git_hash = 4;
  if (this->git_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->git_hash());
  }

  // string producer = 5;
  if (this->producer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->producer());
  }

  // uint32 major_number = 1;
  if (this->major_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->major_number());
  }

  // uint32 minor_number = 2;
  if (this->minor_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minor_number());
  }

  // uint32 patch_number = 3;
  if (this->patch_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->patch_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Version::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.Version)
  GOOGLE_DCHECK_NE(&from, this);
  const Version* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Version>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.Version)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.Version)
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.git_hash().size() > 0) {

    git_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.git_hash_);
  }
  if (from.producer().size() > 0) {

    producer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer_);
  }
  if (from.major_number() != 0) {
    set_major_number(from.major_number());
  }
  if (from.minor_number() != 0) {
    set_minor_number(from.minor_number());
  }
  if (from.patch_number() != 0) {
    set_patch_number(from.patch_number());
  }
}

void Version::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::Swap(Version* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Version::InternalSwap(Version* other) {
  using std::swap;
  git_hash_.Swap(&other->git_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  producer_.Swap(&other->producer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(major_number_, other->major_number_);
  swap(minor_number_, other->minor_number_);
  swap(patch_number_, other->patch_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Version::GetMetadata() const {
  protobuf_substrait_2fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_substrait_2fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace substrait
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::substrait::PlanRel* Arena::CreateMaybeMessage< ::substrait::PlanRel >(Arena* arena) {
  return Arena::CreateInternal< ::substrait::PlanRel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::substrait::Plan* Arena::CreateMaybeMessage< ::substrait::Plan >(Arena* arena) {
  return Arena::CreateInternal< ::substrait::Plan >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::substrait::PlanVersion* Arena::CreateMaybeMessage< ::substrait::PlanVersion >(Arena* arena) {
  return Arena::CreateInternal< ::substrait::PlanVersion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::substrait::Version* Arena::CreateMaybeMessage< ::substrait::Version >(Arena* arena) {
  return Arena::CreateInternal< ::substrait::Version >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
