# name: test/sql/test_substrait_enable_optimizer.test
# description: Test conversion of DuckDB built-in function names to Substrait function names
# group: [sql]

require substrait

statement ok
PRAGMA enable_verification

statement ok
CREATE table ints (i INT);

statement ok
INSERT INTO ints VALUES (20), (8), (99), (3000);

# optimized
statement ok
CALL get_substrait('SELECT abs(i) FROM ints');

# unoptimized
statement ok
CALL get_substrait('SELECT abs(i) FROM ints', enable_optimizer=false);

statement ok
CREATE table tbl (v varchar);

statement ok
insert into tbl VALUES('hi'), ('universe'), ('ducky');

# An optimized DuckDB query plan often substitutes the LIKE operator for other operations/functions such as: equal, is_not_null, ends_with
statement ok
CALL get_substrait('select * from tbl where v LIKE ''%y''');

# If substitution is not desirable an unoptimized plan can be used instead.
statement ok
CALL get_substrait('select * from tbl where v LIKE ''%y''', enable_optimizer=false);

# ---------------------------- Same tests with JSON ----------------------------

statement ok
CREATE table ints_json (i INT);

statement ok
INSERT INTO ints_json VALUES (20), (8), (99), (3000);

# query plan from an optimised Duckdb query plan  
statement ok
CALL get_substrait_json('SELECT abs(i) FROM ints_json');

# query plan from an unoptimised Duckdb query plan
statement ok
CALL get_substrait_json('SELECT abs(i) FROM ints_json', enable_optimizer=false);
