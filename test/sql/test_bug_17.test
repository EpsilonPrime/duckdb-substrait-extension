# name: test/sql/test_bug_17.test
# description: Test for bug #17
# group: [substrait]

require substrait

require parquet

statement ok
PRAGMA enable_verification

query I
CALL get_substrait_json('select * from parquet_scan(''data/bug-17/test_table.parquet'') ')
----
{"relations":[{"root":{"input":{"project":{"input":{"read":{"baseSchema":{"names":["r","a","b"],"struct":{"types":[{"struct":{"types":[{"i64":{"nullability":"NULLABILITY_NULLABLE"}},{"string":{"nullability":"NULLABILITY_NULLABLE"}}],"nullability":"NULLABILITY_NULLABLE"}}],"nullability":"NULLABILITY_REQUIRED"}},"projection":{"select":{"structItems":[{}]},"maintainSingularStruct":true},"localFiles":{"items":[{"uriFile":"data/bug-17/test_table.parquet","parquet":{}}]}}},"expressions":[{"selection":{"directReference":{"structField":{}},"rootReference":{}}}]}},"names":["r"]}}],"version":{"minorNumber":48,"producer":"DuckDB"}} <> {"relations":[{"root":{"input":{"project":{"input":{"read":{"baseSchema":{"names":["r"],"struct":{"types":[{"struct":{"types":[{"i64":{"nullability":"NULLABILITY_NULLABLE"}},{"string":{"nullability":"NULLABILITY_NULLABLE"}}],"nullability":"NULLABILITY_NULLABLE"}}],"nullability":"NULLABILITY_REQUIRED"}},"projection":{"select":{"structItems":[{}]},"maintainSingularStruct":true},"localFiles":{"items":[{"uriFile":"data/bug-17/test_table.parquet","parquet":{}}]}}},"expressions":[{"selection":{"directReference":{"structField":{}},"rootReference":{}}}]}},"names":["r"]}}],"version":{"minorNumber":48,"producer":"DuckDB"}}


query I
CALL from_substrait_json('{"relations":[{"root":{"input":{"project":{"input":{"read":{"baseSchema":{"names":["r"],"struct":{"types":[{"struct":{"types":[{"i64":{"nullability":"NULLABILITY_NULLABLE"}},{"string":{"nullability":"NULLABILITY_NULLABLE"}}],"nullability":"NULLABILITY_NULLABLE"}}],"nullability":"NULLABILITY_REQUIRED"}},"projection":{"select":{"structItems":[{}]},"maintainSingularStruct":true},"localFiles":{"items":[{"uriFile":"data/bug-17/test_table.parquet","parquet":{}}]}}},"expressions":[{"selection":{"directReference":{"structField":{}},"rootReference":{}}}]}},"names":["r"]}}],"version":{"minorNumber":48,"producer":"DuckDB"}}')
----
{'a': 1, 'b': b}

query I
from parquet_scan('data/bug-17/test_table.parquet')
----
{'a': 1, 'b': b}

statement ok
create table mytesttable as from parquet_scan('data/bug-17/test_table.parquet');

query I
CALL get_substrait_json('select * from mytesttable ')
----
{"relations":[{"root":{"input":{"project":{"input":{"read":{"baseSchema":{"names":["r","a","b"],"struct":{"types":[{"struct":{"types":[{"i64":{"nullability":"NULLABILITY_NULLABLE"}},{"string":{"nullability":"NULLABILITY_NULLABLE"}}],"nullability":"NULLABILITY_NULLABLE"}}],"nullability":"NULLABILITY_REQUIRED"}},"projection":{"select":{"structItems":[{}]},"maintainSingularStruct":true},"localFiles":{"items":[{"uriFile":"data/bug-17/test_table.parquet","parquet":{}}]}}},"expressions":[{"selection":{"directReference":{"structField":{}},"rootReference":{}}}]}},"names":["r"]}}],"version":{"minorNumber":48,"producer":"DuckDB"}} <> {"relations":[{"root":{"input":{"project":{"input":{"read":{"baseSchema":{"names":["r"],"struct":{"types":[{"struct":{"types":[{"i64":{"nullability":"NULLABILITY_NULLABLE"}},{"string":{"nullability":"NULLABILITY_NULLABLE"}}],"nullability":"NULLABILITY_NULLABLE"}}],"nullability":"NULLABILITY_REQUIRED"}},"projection":{"select":{"structItems":[{}]},"maintainSingularStruct":true},"localFiles":{"items":[{"uriFile":"data/bug-17/test_table.parquet","parquet":{}}]}}},"expressions":[{"selection":{"directReference":{"structField":{}},"rootReference":{}}}]}},"names":["r"]}}],"version":{"minorNumber":48,"producer":"DuckDB"}}


query I
CALL from_substrait_json('{ "relations": [ { "root": { "input": { "read": { "common": { "direct": {} }, "baseSchema": { "names": [ "r", "a", "b" ], "struct": { "types": [ { "struct": { "types": [ { "i64": { "nullability": "NULLABILITY_REQUIRED" } }, { "string": { "nullability": "NULLABILITY_REQUIRED" } } ], "nullability": "NULLABILITY_NULLABLE" } } ], "nullability": "NULLABILITY_REQUIRED" } }, "namedTable": { "names": [ "mytesttable" ] } } }, "names": [ "r", "a", "b" ] } } ], "version": { "minorNumber": 42, "producer": "mytool" } }')
